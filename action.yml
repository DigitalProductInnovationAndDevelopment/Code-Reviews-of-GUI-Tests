# ───────────────────────────────────────────────────────────────
#  GUI-BASED TESTING CODE REVIEW — MODULAR COMPOSITE ACTION
# ───────────────────────────────────────────────────────────────
name: 'GUI-Based Testing Code Review'
description: 'Playwright GUI tests · ESLint/Prettier · visual dashboard, checklist & PR comment'
author: 'Digital Product Innovation and Development – TUM'

branding:
  icon: 'eye'
  color: 'purple'

# ───────────────────────────────────────────────────────────────
# ▸▸ Inputs
# ───────────────────────────────────────────────────────────────
inputs:
  github-token:
    description: 'GitHub token (or PAT) for API calls'
    required: true
    default: ${{ github.token }}

  mode:
    description: |
      full            – run lint, tests, dashboard   (default)
      lint-only       – only ESLint/Prettier
      test-only       – only Playwright
      dashboard-only  – build dashboard from existing artifacts
    required: false
    default: 'full'

  enable-playwright:
    description: 'Run Playwright (overrides mode)'
    required: false
    default: 'true'

  enable-lint:
    description: 'Run ESLint / Prettier (overrides mode)'
    required: false
    default: 'true'

  enable-dashboard:
    description: 'Generate dashboard / checklist (overrides mode)'
    required: false
    default: 'true'

  enable-pr-comments:
    description: 'Post summary comment on pull-requests'
    required: false
    default: 'true'

  enable-visual-comparison:
    description: 'Also run Playwright on the main branch and compare'
    required: false
    default: 'false'

  test-files:
    description: 'Folder or glob passed to "npx playwright test"'
    required: false
    default: 'tests'

  node-version:
    description: 'Node version'
    required: false
    default: '18'

  playwright-config:
    description: 'Path to Playwright config'
    required: false
    default: 'playwright.config.js'

  reviewdog-reporter:
    description: 'Reviewdog reporter'
    required: false
    default: 'github-pr-review'

  main-branch:
    description: 'Main branch for comparison'
    required: false
    default: 'main'

  key-test-file:
    description: 'File used to verify checkout'
    required: false
    default: 'tests/demo-todo-app.spec.ts'

  enable-github-pages:
    description: 'Deploy dashboard to GitHub Pages'
    required: false
    default: 'true'

  web-report-url:
    description: 'Base URL override for dashboard link'
    required: false
    default: ''

  artifacts-retention-days:
    description: 'Days to retain artifacts'
    required: false
    default: '30'

  fail-on-test-failure:
    description: 'Fail job if Playwright tests fail'
    required: false
    default: 'false'

  extra-npm-dependencies:
    description: 'Extra npm packages (space-separated)'
    required: false
    default: ''

  custom-artifacts-path:
    description: |
      Dashboard-only: folder already containing artifacts.
      Must include:
        • playwright-summary*.json
        • playwright-report/ (HTML & screenshots)
    required: false
    default: ''

# ───────────────────────────────────────────────────────────────
# ▸▸ Outputs
# ───────────────────────────────────────────────────────────────
outputs:
  test-results:
    description: 'JSON summary of Playwright results'
    value: ${{ steps.test-summary.outputs.results }}
  visual-artifacts-path:
    description: 'Path to generated artifacts'
    value: ${{ steps.setup.outputs.artifacts-path }}
  dashboard-url:
    description: 'Deployed dashboard URL'
    value: ${{ steps.deploy-report.outputs.page_url }}
  test-pass-rate:
    description: 'Playwright pass-rate'
    value: ${{ steps.test-summary.outputs.pass-rate }}
  total-gui-tests:
    description: 'Total Playwright tests executed'
    value: ${{ steps.test-summary.outputs.total-tests }}
  code-quality-score:
    description: 'Overall quality score (lint)'
    value: ${{ steps.lint-summary.outputs.quality-score }}
  pr-test-results:
    description: 'PR-branch Playwright summary'
    value: ${{ steps.test-summary.outputs.pr-results }}
  main-test-results:
    description: 'Main-branch Playwright summary'
    value: ${{ steps.test-summary.outputs.main-results }}
  visual-comparison:
    description: 'Comparison PR vs main'
    value: ${{ steps.test-summary.outputs.visual-comparison }}
  gui-regression-detected:
    description: 'True if regression detected'
    value: ${{ steps.test-summary.outputs.regression-detected }}
  review-checklist-status:
    description: 'Checklist completion status'
    value: ${{ steps.checklist.outputs.status }}

# ───────────────────────────────────────────────────────────────
# ▸▸ Composite run
# ───────────────────────────────────────────────────────────────
runs:
  using: composite
  steps:

  # 0 derive feature flags
  - id: modes
    name: Derive feature flags
    shell: bash
    run: |
      play='${{ inputs.enable-playwright }}'
      lint='${{ inputs.enable-lint }}'
      dash='${{ inputs.enable-dashboard }}'
      compare='${{ inputs.enable-visual-comparison }}'
      case '${{ inputs.mode }}' in
        lint-only)      play=false ; dash=false ; compare=false ;;
        test-only)      lint=false ; dash=false ;;
        dashboard-only) play=false ; lint=false ; compare=false ;;
      esac
      echo "playwright=$play" >> $GITHUB_OUTPUT
      echo "lint=$lint"       >> $GITHUB_OUTPUT
      echo "dashboard=$dash"  >> $GITHUB_OUTPUT
      echo "compare=$compare" >> $GITHUB_OUTPUT

  # 1 workspace
  - id: setup
    name: Prepare workspace
    shell: bash
    run: |
      mkdir -p artifacts
      echo "artifacts-path=artifacts" >> $GITHUB_OUTPUT

  - uses: actions/setup-node@v4
    with:
      node-version: ${{ inputs.node-version }}

  - name: Install npm
    shell: bash
    run: |
      if [ -f package.json ]; then npm ci 2>/dev/null || npm install; fi
      if [ -n "${{ inputs.extra-npm-dependencies }}" ]; then
        npm install --no-save ${{ inputs.extra-npm-dependencies }}
      fi

  # 2 lint
  - uses: reviewdog/action-setup@v1
    if: steps.modes.outputs.lint == 'true' && github.event_name == 'pull_request'
    with:
      reviewdog_version: latest

  - name: ESLint / Prettier
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    run: |
      if [ -f scripts/lint.js ]; then node scripts/lint.js
      elif npx --no-install eslint -v &>/dev/null; then npx eslint .
      else echo 'ℹ️ no lint script'; fi
    continue-on-error: true

  # 3 ── Playwright on PR branch
  - name: Install Playwright browsers
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: npx playwright install --with-deps

  - name: Run Playwright (PR)
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    env:
      PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
    run: npx playwright test "${{ inputs.test-files }}"
    continue-on-error: true
    
  - name: Archive Playwright artifacts (PR)
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      [ -f playwright-summary.json ] && mv playwright-summary.json artifacts/playwright-summary-pr.json
      [ -f playwright-metrics.json ] && mv playwright-metrics.json artifacts/
      if [ -d playwright-report ]; then
        mkdir -p artifacts/pr-report
        mv playwright-report/* artifacts/pr-report/
      fi
      if [ ! -f artifacts/playwright-summary-pr.json ] && [ -f artifacts/playwright-metrics.json ]; then
        jq '{
              total:    ((.stats.tests   // .stats.total      //
                          ([ .. | objects | select(has("outcome") or has("status")) ] | length)) | tonumber),
              passed:   ((.stats.passed  // .stats.passes     // .stats.expected   //
                          ([ .. | objects | select(.outcome=="expected" or .status=="passed") ] | length)) | tonumber),
              failed:   ((.stats.failed  // .stats.failures   // .stats.unexpected //
                          ([ .. | objects | select(.outcome=="unexpected" or .status=="failed") ] | length)) | tonumber),
              skipped:  ((.stats.skipped //
                          ([ .. | objects | select(.outcome=="skipped" or .status=="skipped") ] | length)) | tonumber),
              duration: ((.stats.duration // 0) | tonumber),
              pass_rate: ( ((.stats.tests // .stats.total //
                             ([ .. | objects | select(has("outcome") or has("status")) ] | length)) | tonumber) as $t
                         | ((.stats.passed // .stats.passes // .stats.expected //
                             ([ .. | objects | select(.outcome=="expected" or .status=="passed") ] | length)) | tonumber) as $p
                         | if $t==0 then 0 else (( $p * 100 ) / $t | floor) end )
            }' artifacts/playwright-metrics.json > artifacts/playwright-summary-pr.json
      fi

  - name: Alias summary for checklist
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      cp artifacts/playwright-summary-pr.json artifacts/playwright-summary.json

  # 3b ── Playwright on main branch -----------------------------------------
  - name: Run Playwright on main
    if: steps.modes.outputs.compare == 'true' && github.event_name == 'pull_request'
    shell: bash
    env:
      PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
    run: |
      git fetch --quiet origin "${{ inputs.main-branch }}" || true
      git checkout origin/${{ inputs.main-branch }} -- tests/ playwright.config.js || true

      npx playwright test "${{ inputs.test-files }}"

      mkdir -p artifacts/main-report
      [ -d playwright-report ] && mv playwright-report/* artifacts/main-report/ || true
      [ -f playwright-summary.json ] && mv playwright-summary.json artifacts/playwright-summary-main.json || true
      [ -f playwright-metrics.json ] && mv playwright-metrics.json artifacts/

      if [ ! -f artifacts/playwright-summary-main.json ] && [ -f artifacts/playwright-metrics.json ]; then
        jq '{
              total:    ((.stats.tests   // .stats.total      //
                          ([ .. | objects | select(has("outcome") or has("status")) ] | length)) | tonumber),
              passed:   ((.stats.passed  // .stats.passes     // .stats.expected   //
                          ([ .. | objects | select(.outcome=="expected" or .status=="passed") ] | length)) | tonumber),
              failed:   ((.stats.failed  // .stats.failures   // .stats.unexpected //
                          ([ .. | objects | select(.outcome=="unexpected" or .status=="failed") ] | length)) | tonumber),
              skipped:  ((.stats.skipped //
                          ([ .. | objects | select(.outcome=="skipped" or .status=="skipped") ] | length)) | tonumber),
              duration: ((.stats.duration // 0) | tonumber),
              pass_rate: ( ((.stats.tests // .stats.total //
                             ([ .. | objects | select(has("outcome") or has("status")) ] | length)) | tonumber) as $t
                         | ((.stats.passed // .stats.passes // .stats.expected //
                             ([ .. | objects | select(.outcome=="expected" or .status=="passed") ] | length)) | tonumber) as $p
                         | if $t==0 then 0 else (( $p * 100 ) / $t | floor) end )
            }' artifacts/playwright-metrics.json > artifacts/playwright-summary-main.json
      fi

      git checkout HEAD -- tests/ playwright.config.js
    continue-on-error: true

  # 4 external artifacts (dashboard-only)
  - name: Import external artifacts
    if: inputs.mode == 'dashboard-only'
    shell: bash
    run: |
      SRC='${{ inputs.custom-artifacts-path }}'
      if [ "$SRC" != 'artifacts' ] && [ -d "$SRC" ]; then
        cp -R "$SRC/." artifacts/
      fi

  # 5 ensure metrics for flow-chart
  - name: Locate metrics JSON
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      M=$(find artifacts -name playwright-metrics.json | head -n1 || true)
      [ -n "$M" ] && cp "$M" playwright-metrics.json

  # 6 flow-chart
  - name: Flow-chart
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      [ -f scripts/generate-flowchart.js ] && node scripts/generate-flowchart.js
    continue-on-error: true

  # 7 checklist
  - id: checklist
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      if [ -f scripts/checklist.js ]; then
        node scripts/checklist.js
      else
        echo '{"status":"missing"}' > artifacts/checklist.json
      fi
    continue-on-error: true

  # 8 dashboard HTML
  - id: dashboard
    name: Build dashboard HTML
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      [ -f scripts/generate-webpage.js ] && node scripts/generate-webpage.js
    continue-on-error: true

  # 9 upload Pages artifact & deploy
  - uses: actions/upload-pages-artifact@v3
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    with:
      name: gui-test-visual-artifacts
      path: artifacts/web-report

  - id: deploy-report
    name: Deploy to GitHub Pages
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    uses: actions/deploy-pages@v4
    with:
      artifact_name: gui-test-visual-artifacts
    continue-on-error: true

  # 10 PR comment
  - name: PR summary comment
    if: steps.modes.outputs.dashboard == 'true' &&
        inputs.enable-pr-comments == 'true' &&
        github.event_name == 'pull_request'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      WEB_REPORT_URL: ${{ inputs.web-report-url || steps.deploy-report.outputs.page_url }}
    run: |
      [ -f scripts/summary-comment.js ] && node scripts/summary-comment.js
    continue-on-error: true

  # 11 done
  - name: Finish
    shell: bash
    run: echo '✅ GUI-Based Testing Code Review finished.'
