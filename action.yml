name: 'GUI-Based Testing Code Review Dashboard'
description: 'Dashboard and bot comments to improve comprehension during GUI test code reviews'
author: 'Digital Product Innovation and Development - TUM'

branding:
  icon: 'eye'
  color: 'purple'

inputs:
  github-token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  
  mode:
    description: 'Operation mode: full, lint-only, test-only, dashboard-only, comment-only'
    required: false
    default: 'full'
  
  playwright-artifact:
    description: 'Name of existing Playwright test artifact to use (if mode is dashboard-only)'
    required: false
    default: ''
  
  eslint-artifact:
    description: 'Name of existing ESLint artifact to use (if mode is dashboard-only)'
    required: false
    default: ''
  
  prettier-artifact:
    description: 'Name of existing Prettier artifact to use (if mode is dashboard-only)'
    required: false
    default: ''
  
  custom-artifacts-path:
    description: 'Path to custom artifacts directory'
    required: false
    default: 'artifacts'
  
  dependencies:
    description: 'Additional npm dependencies to install (space-separated)'
    required: false
    default: ''
  
  use-project-eslint:
    description: 'Use project ESLint config if exists'
    required: false
    default: 'true'
  
  use-project-prettier:
    description: 'Use project Prettier config if exists'
    required: false
    default: 'true'
  
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '18'
  
  enable-pr-comments:
    description: 'Post PR comments with dashboard link'
    required: false
    default: 'true'
  
  enable-github-pages:
    description: 'Deploy dashboard to GitHub Pages'
    required: false
    default: 'true'
  
  skip-playwright:
    description: 'Skip Playwright tests'
    required: false
    default: 'false'
  
  skip-eslint:
    description: 'Skip ESLint checks'
    required: false
    default: 'false'
  
  skip-prettier:
    description: 'Skip Prettier checks'
    required: false
    default: 'false'
  
  artifacts-retention-days:
    description: 'Days to retain artifacts'
    required: false
    default: '30'
  
  web-report-url:
    description: 'Custom dashboard URL'
    required: false
    default: ''
  
  fail-on-error:
    description: 'Fail action on any error'
    required: false
    default: 'false'

outputs:
  dashboard-url:
    description: 'URL to the deployed dashboard'
    value: ${{ steps.deploy.outputs.page_url }}
  
  artifacts-uploaded:
    description: 'List of uploaded artifacts'
    value: ${{ steps.summary.outputs.artifacts }}
  
  test-results:
    description: 'Test results summary'
    value: ${{ steps.summary.outputs.test-results }}
  
  lint-results:
    description: 'Lint results summary'
    value: ${{ steps.summary.outputs.lint-results }}

runs:
  using: 'composite'
  steps:
    - name: Setup environment
      id: setup
      shell: bash
      run: |
        echo "🚀 GUI Test Review Dashboard - Mode: ${{ inputs.mode }}"
        mkdir -p ${{ inputs.custom-artifacts-path }}
        echo "artifacts-path=${{ inputs.custom-artifacts-path }}" >> $GITHUB_OUTPUT
    
    - name: Setup Node.js
      if: inputs.mode != 'comment-only'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
    
    - name: Install project dependencies
      if: inputs.mode != 'comment-only' && inputs.mode != 'dashboard-only'
      shell: bash
      run: |
        if [ -f "package.json" ]; then
          echo "📦 Installing project dependencies..."
          npm install
          
          # Install additional dependencies if specified
          if [ -n "${{ inputs.dependencies }}" ]; then
            echo "📦 Installing additional dependencies: ${{ inputs.dependencies }}"
            npm install ${{ inputs.dependencies }}
          fi
        fi
    
    # ─── LINTING MODE ───────────────────────────────────────
    - name: Run linting checks
      if: (inputs.mode == 'full' || inputs.mode == 'lint-only') && inputs.skip-eslint != 'true'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        USE_PROJECT_CONFIG: ${{ inputs.use-project-eslint }}
        ARTIFACTS_DIR: ${{ inputs.custom-artifacts-path }}
      run: |
        echo "🔍 Running linting checks..."
        SCRIPT_PATH="${{ github.action_path }}/scripts/lint.js"
        if [ ! -f "$SCRIPT_PATH" ]; then
          SCRIPT_PATH="scripts/lint.js"
        fi
        
        if [ -f "$SCRIPT_PATH" ]; then
          node "$SCRIPT_PATH"
        else
          echo "⚠️ Lint script not found"
        fi
      continue-on-error: true
    
    # ─── TESTING MODE ───────────────────────────────────────
    - name: Install Playwright browsers
      if: (inputs.mode == 'full' || inputs.mode == 'test-only') && inputs.skip-playwright != 'true'
      shell: bash
      run: |
        echo "🎭 Installing Playwright browsers..."
        npx playwright install --with-deps
    
    - name: Run Playwright tests
      if: (inputs.mode == 'full' || inputs.mode == 'test-only') && inputs.skip-playwright != 'true'
      shell: bash
      env:
        ARTIFACTS_DIR: ${{ inputs.custom-artifacts-path }}
      run: |
        echo "🧪 Running Playwright tests..."
        SCRIPT_PATH="${{ github.action_path }}/scripts/playwright-test.js"
        if [ ! -f "$SCRIPT_PATH" ]; then
          SCRIPT_PATH="scripts/playwright-test.js"
        fi
        
        if [ -f "$SCRIPT_PATH" ]; then
          node "$SCRIPT_PATH"
        else
          npx playwright test
        fi
      continue-on-error: true
    
    # ─── UPLOAD ARTIFACTS (for modular workflow) ────────────
    - name: Upload test artifacts
      if: (inputs.mode == 'full' || inputs.mode == 'test-only') && always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-test-artifacts
        path: ${{ inputs.custom-artifacts-path }}/playwright-*
        retention-days: ${{ inputs.artifacts-retention-days }}
      continue-on-error: true
    
    - name: Upload lint artifacts
      if: (inputs.mode == 'full' || inputs.mode == 'lint-only') && always()
      uses: actions/upload-artifact@v4
      with:
        name: lint-artifacts
        path: ${{ inputs.custom-artifacts-path }}/lint-*
        retention-days: ${{ inputs.artifacts-retention-days }}
      continue-on-error: true
    
    # ─── DASHBOARD MODE ─────────────────────────────────────
    - name: Download external artifacts
      if: inputs.mode == 'dashboard-only'
      shell: bash
      run: |
        echo "📥 Downloading external artifacts..."
        
        # Download Playwright artifacts if specified
        if [ -n "${{ inputs.playwright-artifact }}" ]; then
          echo "Downloading Playwright artifact: ${{ inputs.playwright-artifact }}"
          # Note: User should use actions/download-artifact before calling this action
        fi
        
        # Download ESLint artifacts if specified
        if [ -n "${{ inputs.eslint-artifact }}" ]; then
          echo "Downloading ESLint artifact: ${{ inputs.eslint-artifact }}"
        fi
        
        # Download Prettier artifacts if specified
        if [ -n "${{ inputs.prettier-artifact }}" ]; then
          echo "Downloading Prettier artifact: ${{ inputs.prettier-artifact }}"
        fi
    
    - name: Generate visual assets
      if: inputs.mode == 'full' || inputs.mode == 'dashboard-only'
      shell: bash
      env:
        ARTIFACTS_DIR: ${{ inputs.custom-artifacts-path }}
      run: |
        echo "📊 Generating visual assets..."
        
        # Generate flowchart
        FLOWCHART_SCRIPT="${{ github.action_path }}/scripts/generate-flowchart.js"
        if [ ! -f "$FLOWCHART_SCRIPT" ]; then
          FLOWCHART_SCRIPT="scripts/generate-flowchart.js"
        fi
        
        if [ -f "$FLOWCHART_SCRIPT" ] && [ -f "${{ inputs.custom-artifacts-path }}/playwright-metrics.json" ]; then
          node "$FLOWCHART_SCRIPT"
        fi
        
        # Generate checklist
        CHECKLIST_SCRIPT="${{ github.action_path }}/scripts/checklist.js"
        if [ ! -f "$CHECKLIST_SCRIPT" ]; then
          CHECKLIST_SCRIPT="scripts/checklist.js"
        fi
        
        if [ -f "$CHECKLIST_SCRIPT" ]; then
          node "$CHECKLIST_SCRIPT"
        fi
        
        # Generate dashboard
        DASHBOARD_SCRIPT="${{ github.action_path }}/scripts/generate-webpage.js"
        if [ ! -f "$DASHBOARD_SCRIPT" ]; then
          DASHBOARD_SCRIPT="scripts/generate-webpage.js"
        fi
        
        if [ -f "$DASHBOARD_SCRIPT" ]; then
          node "$DASHBOARD_SCRIPT"
        fi
      continue-on-error: true
    
    # ─── DEPLOYMENT ─────────────────────────────────────────
    - name: Upload dashboard artifacts
      if: (inputs.mode == 'full' || inputs.mode == 'dashboard-only') && always()
      uses: actions/upload-artifact@v4
      with:
        name: gui-dashboard-artifacts
        path: ${{ inputs.custom-artifacts-path }}/web-report/
        retention-days: ${{ inputs.artifacts-retention-days }}
      continue-on-error: true
    
    - name: Deploy to GitHub Pages
      id: deploy
      if: inputs.enable-github-pages == 'true' && (inputs.mode == 'full' || inputs.mode == 'dashboard-only')
      uses: actions/deploy-pages@v4
      with:
        artifact_name: gui-dashboard-artifacts
      continue-on-error: true
    
    # ─── COMMENT MODE ───────────────────────────────────────
    - name: Post PR comment
      if: inputs.enable-pr-comments == 'true' && (inputs.mode == 'full' || inputs.mode == 'comment-only') && github.event_name == 'pull_request'
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        ARTIFACTS_DIR: ${{ inputs.custom-artifacts-path }}
        WEB_REPORT_URL: ${{ inputs.web-report-url || steps.deploy.outputs.page_url }}
      run: |
        echo "💬 Posting PR comment..."
        COMMENT_SCRIPT="${{ github.action_path }}/scripts/summary-comment.js"
        if [ ! -f "$COMMENT_SCRIPT" ]; then
          COMMENT_SCRIPT="scripts/summary-comment.js"
        fi
        
        if [ -f "$COMMENT_SCRIPT" ]; then
          node "$COMMENT_SCRIPT"
        fi
      continue-on-error: true
    
    # ─── SUMMARY ────────────────────────────────────────────
    - name: Generate summary
      id: summary
      if: always()
      shell: bash
      run: |
        echo "📊 Generating summary..."
        
        # Collect artifacts that were created
        ARTIFACTS=""
        if [ -f "${{ inputs.custom-artifacts-path }}/playwright-summary.json" ]; then
          ARTIFACTS="${ARTIFACTS}playwright-test-artifacts,"
        fi
        if [ -f "${{ inputs.custom-artifacts-path }}/lint-summary.json" ]; then
          ARTIFACTS="${ARTIFACTS}lint-artifacts,"
        fi
        if [ -d "${{ inputs.custom-artifacts-path }}/web-report" ]; then
          ARTIFACTS="${ARTIFACTS}gui-dashboard-artifacts,"
        fi
        
        echo "artifacts=${ARTIFACTS%,}" >> $GITHUB_OUTPUT
        
        # Extract test results
        if [ -f "${{ inputs.custom-artifacts-path }}/playwright-summary.json" ]; then
          TEST_RESULTS=$(cat "${{ inputs.custom-artifacts-path }}/playwright-summary.json")
          echo "test-results=$TEST_RESULTS" >> $GITHUB_OUTPUT
        fi
        
        # Extract lint results
        if [ -f "${{ inputs.custom-artifacts-path }}/lint-summary.json" ]; then
          LINT_RESULTS=$(cat "${{ inputs.custom-artifacts-path }}/lint-summary.json")
          echo "lint-results=$LINT_RESULTS" >> $GITHUB_OUTPUT
        fi
        
        echo "✅ GUI Test Review Dashboard completed!"
        echo "Mode: ${{ inputs.mode }}"
        echo "Artifacts: ${ARTIFACTS%,}"
    
    - name: Check for failures
      if: inputs.fail-on-error == 'true'
      shell: bash
      run: |
        if [ -f "${{ inputs.custom-artifacts-path }}/playwright-summary.json" ]; then
          FAILED=$(jq -r '.failed // 0' "${{ inputs.custom-artifacts-path }}/playwright-summary.json")
          if [ "$FAILED" -gt 0 ]; then
            echo "❌ Tests failed: $FAILED failures"
            exit 1
          fi
        fi