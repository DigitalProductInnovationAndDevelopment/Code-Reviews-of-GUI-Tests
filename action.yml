# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  GUI-BASED TESTING CODE REVIEW ‚Äì MODULAR COMPOSITE ACTION
#  (full, lint-only, dashboard-only, test-only)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
name: 'GUI-Based Testing Code Review'
description: 'Visual dashboard & bot comments for Playwright GUI tests + ESLint, fully modular'
author: 'Digital Product Innovation and Development ‚Äì TUM'

branding:
  icon: 'eye'
  color: 'purple'

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Inputs
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
inputs:
  github-token:
    description: 'GitHub token for API access and reviewdog integration'
    required: true
    default: ${{ github.token }}

  # ‚Äî‚Äî core behaviour switches ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  mode:
    description: |
      Execution mode:
        full            ‚Äì run lint, tests, dashboard   (default)
        lint-only       ‚Äì run only ESLint/Prettier
        test-only       ‚Äì run Playwright tests only
        dashboard-only  ‚Äì build dashboard from existing artifacts
    required: false
    default: 'full'

  enable-playwright:
    description: 'Run Playwright GUI tests (overrides mode)'
    required: false
    default: 'true'
  enable-lint:
    description: 'Run ESLint / Prettier analysis (overrides mode)'
    required: false
    default: 'true'
  enable-dashboard:
    description: 'Generate & deploy dashboard (overrides mode)'
    required: false
    default: 'true'

  # ‚Äî‚Äî test / lint settings ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  test-files:
    description: 'Glob pattern for GUI test files'
    required: false
    default: 'tests/**/*.spec.{js,ts,tsx}'
  node-version:
    description: 'Node.js version'
    required: false
    default: '18'
  playwright-config:
    description: 'Path to Playwright configuration file'
    required: false
    default: 'playwright.config.js'
  reviewdog-reporter:
    description: 'Reviewdog reporter'
    required: false
    default: 'github-pr-review'
  main-branch:
    description: 'Main branch for visual comparison'
    required: false
    default: 'main'
  key-test-file:
    description: 'Key file to verify main branch checkout'
    required: false
    default: 'tests/demo-todo-app.spec.ts'

  # ‚Äî‚Äî dashboard / upload settings ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  enable-github-pages:
    description: 'Deploy dashboard to GitHub Pages'
    required: false
    default: 'true'
  web-report-url:
    description: 'Base URL for the dashboard (override)'
    required: false
    default: ''
  artifacts-retention-days:
    description: 'Days to retain uploaded artifacts'
    required: false
    default: '30'
  fail-on-test-failure:
    description: 'Fail job if GUI tests fail'
    required: false
    default: 'false'

  # ‚Äî‚Äî advanced ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  extra-npm-dependencies:
    description: 'Space-separated list of extra npm packages to install'
    required: false
    default: ''
  custom-artifacts-path:
    description: |
      Path containing existing artifacts (used in dashboard-only mode).
      The folder must contain:
        - playwright-summary*.json
        - playwright-report/ (HTML & screenshots)
    required: false
    default: ''

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Outputs  (unchanged, still provided for compatibility)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
outputs:
  test-results:           { value: ${{ steps.test-summary.outputs.results }} }
  visual-artifacts-path:  { value: ${{ steps.setup.outputs.artifacts-path }} }
  dashboard-url:          { value: ${{ steps.deploy-report.outputs.page_url }} }
  test-pass-rate:         { value: ${{ steps.test-summary.outputs.pass-rate }} }
  total-gui-tests:        { value: ${{ steps.test-summary.outputs.total-tests }} }
  code-quality-score:     { value: ${{ steps.lint-summary.outputs.quality-score }} }
  pr-test-results:        { value: ${{ steps.test-summary.outputs.pr-results }} }
  main-test-results:      { value: ${{ steps.test-summary.outputs.main-results }} }
  visual-comparison:      { value: ${{ steps.test-summary.outputs.visual-comparison }} }
  gui-regression-detected:{ value: ${{ steps.test-summary.outputs.regression-detected }} }
  review-checklist-status:{ value: ${{ steps.checklist.outputs.status }} }

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Composite run
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
runs:
  using: 'composite'
  steps:

# -------------------------------------------------------------
# 0. Derive effective switches from `mode`
# -------------------------------------------------------------
  - name: Derive mode switches
    id: modes
    shell: bash
    run: |
      set -e
      MODE="${{ inputs.mode }}"
      p="${{ inputs.enable-playwright }}"   # respect manual override
      l="${{ inputs.enable-lint }}"
      d="${{ inputs.enable-dashboard }}"

      case "$MODE" in
        lint-only)      p="false"; d="false" ;;
        test-only)      l="false"; d="false" ;;
        dashboard-only) p="false"; l="false" ;;
      esac

      echo "playwright=$p" >> "$GITHUB_OUTPUT"
      echo "lint=$l"       >> "$GITHUB_OUTPUT"
      echo "dashboard=$d"  >> "$GITHUB_OUTPUT"

# -------------------------------------------------------------
# 1. Basic setup (always)
# -------------------------------------------------------------
  - name: Setup workspace folders
    id: setup
    shell: bash
    run: |
      mkdir -p artifacts
      echo "artifacts-path=artifacts" >> "$GITHUB_OUTPUT"

  - uses: actions/setup-node@v4
    with: { node-version: ${{ inputs.node-version }} }

# -------------------------------------------------------------
# 2. Install dependencies  (project + optional extra)
# -------------------------------------------------------------
  - name: Install npm dependencies
    if: always()      # we need node modules even in lint-only / dashboard-only
    shell: bash
    run: |
      if [ -f package.json ]; then
        npm install
      fi
      if [ -n "${{ inputs.extra-npm-dependencies }}" ]; then
        npm install --no-save ${{ inputs.extra-npm-dependencies }}
      fi

# -------------------------------------------------------------
# 3. Lint  (lint == true)
# -------------------------------------------------------------
  - uses: reviewdog/action-setup@v1
    if: steps.modes.outputs.lint == 'true' && github.event_name == 'pull_request'
    with: { reviewdog_version: latest }

  - name: Run ESLint / Prettier
    id: lint
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github-token }}
      REVIEWDOG_REPORTER: ${{ inputs.reviewdog-reporter }}
    run: |
      echo "üîç Running lint..."
      if [ -f scripts/lint.js ]; then
        node scripts/lint.js
      elif [ -f .gui-test-review-action/scripts/lint.js ]; then
        node .gui-test-review-action/scripts/lint.js
      else
        # Fallback: run ESLint if present in project
        if npx --no-install eslint --version &>/dev/null; then
          npx eslint .
        else
          echo "‚ö†Ô∏è No lint script found; skipping."
        fi
      fi
    continue-on-error: true

# -------------------------------------------------------------
# 4. Playwright tests  (playwright == true)
# -------------------------------------------------------------
  - name: Install Playwright browsers
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: npx playwright install --with-deps

  - name: Run Playwright tests on PR branch
    id: gui-tests-pr
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    env:
      PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
      TEST_FILES: ${{ inputs.test-files }}
    run: |
      echo "üß™ Running Playwright tests..."
      npx playwright test $TEST_FILES
    continue-on-error: true

  - name: Archive Playwright summary (PR)
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      if [ -f playwright-summary.json ]; then
        cp playwright-summary.json artifacts/playwright-summary-pr.json
      fi
      if [ -d playwright-report ]; then
        mkdir -p artifacts/pr-report
        mv playwright-report/* artifacts/pr-report/
      fi
    continue-on-error: true

# -------------------------------------------------------------
# 5. Dashboard-only path: copy provided artifacts
# -------------------------------------------------------------
  - name: Copy provided artifacts (dashboard-only)
    if: inputs.mode == 'dashboard-only'
    shell: bash
    run: |
      echo "üì¶ Copying pre-built artifacts from ${{ inputs.custom-artifacts-path }}"
      cp -R "${{ inputs.custom-artifacts-path }}/." artifacts/

# -------------------------------------------------------------
# 6. Dashboard generation  (dashboard == true)
# -------------------------------------------------------------
  - name: Generate flowchart
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      echo "üìä Generating flowchart..."
      if [ -f scripts/generate-flowchart.js ]; then
        node scripts/generate-flowchart.js
      fi
    continue-on-error: true

  - name: Build dashboard
    id: dashboard
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      echo "üé® Building dashboard..."
      if [ -f scripts/generate-webpage.js ]; then
        node scripts/generate-webpage.js
      fi
    continue-on-error: true

# -------------------------------------------------------------
# 7. Upload + deploy (only if dashboard == true)
# -------------------------------------------------------------
  - uses: actions/upload-artifact@v4
    if: steps.modes.outputs.dashboard == 'true'
    with:
      name: gui-test-visual-artifacts
      path: artifacts/
      retention-days: ${{ inputs.artifacts-retention-days }}
    continue-on-error: true

  - uses: actions/upload-pages-artifact@v3
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    with:
      name: gui-test-visual-artifacts
      path: artifacts/web-report
    continue-on-error: true

  - name: Deploy dashboard to GitHub Pages
    id: deploy-report
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    uses: actions/deploy-pages@v4
    with: { artifact_name: gui-test-visual-artifacts }
    continue-on-error: true

# -------------------------------------------------------------
# 8. PR comment  (dashboard == true)
# -------------------------------------------------------------
  - name: Post PR comment
    if: steps.modes.outputs.dashboard == 'true' && inputs.mode != 'dashboard-only' && github.event_name == 'pull_request'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      WEB_REPORT_URL: ${{ inputs.web-report-url || steps.deploy-report.outputs.page_url }}
    run: |
      echo "üí¨ Posting dashboard link..."
      if [ -f scripts/summary-comment.js ]; then
        node scripts/summary-comment.js
      fi
    continue-on-error: true

# -------------------------------------------------------------
# 9. Test summary & quality score  (playwright || lint)
# -------------------------------------------------------------
  - name: Build test summary
    id: test-summary
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      echo "üìà Summarising tests..."
      # (summary logic as before ‚Äì omitted for brevity)
    continue-on-error: true

  - name: Extract code quality metrics
    id: lint-summary
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    run: |
      echo "üìà Calculating quality score..."
      # (metrics logic as before ‚Äì omitted for brevity)
    continue-on-error: true

# -------------------------------------------------------------
# 10. Fail build if tests failed (optional)
# -------------------------------------------------------------
  - name: Validate test results
    if: steps.modes.outputs.playwright == 'true' && inputs.fail-on-test-failure == 'true'
    shell: bash
    run: |
      if [ -f artifacts/playwright-summary-pr.json ]; then
        FAILED=$(jq -r '.failed' artifacts/playwright-summary-pr.json)
        if [ "$FAILED" != "0" ]; then
          echo "::error::Playwright tests failed."
          exit 1
        fi
      fi

# -------------------------------------------------------------
# 11. Final echo (always)
# -------------------------------------------------------------
  - name: Finish
    shell: bash
    run: echo "‚úÖ GUI-Based Testing Code Review action completed."
