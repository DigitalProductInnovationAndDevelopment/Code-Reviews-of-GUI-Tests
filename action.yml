# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#  GUI-BASED TESTING CODE REVIEW ‚Äî MODULAR COMPOSITE ACTION
#  Version: v1.0.10
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
name: 'GUI-Based Testing Code Review'
description: 'Visual dashboard & bot comments for Playwright GUI tests + ESLint, fully modular'
author: 'Digital Product Innovation and Development ‚Äì TUM'

branding:
  icon: 'eye'
  color: 'purple'

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Inputs
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
inputs:
  github-token:
    description: 'GitHub token for API access and reviewdog integration'
    required: true
    default: ${{ github.token }}

  mode:
    description: |
      Execution mode:
        full            ‚Äì run lint, tests, dashboard   (default)
        lint-only       ‚Äì run only ESLint/Prettier
        test-only       ‚Äì run Playwright tests only
        dashboard-only  ‚Äì build dashboard from existing artifacts
    required: false
    default: 'full'

  enable-playwright:
    description: 'Run Playwright GUI tests (overrides mode)'
    required: false
    default: 'true'
  enable-lint:
    description: 'Run ESLint / Prettier analysis (overrides mode)'
    required: false
    default: 'true'
  enable-dashboard:
    description: 'Generate & deploy dashboard (overrides mode)'
    required: false
    default: 'true'

  test-files:
    description: 'Glob or folder path for GUI test files'
    required: false
    default: 'tests'
  node-version:
    description: 'Node.js version'
    required: false
    default: '18'
  playwright-config:
    description: 'Path to Playwright configuration file'
    required: false
    default: 'playwright.config.js'
  reviewdog-reporter:
    description: 'Reviewdog reporter'
    required: false
    default: 'github-pr-review'
  main-branch:
    description: 'Main branch for visual comparison'
    required: false
    default: 'main'
  key-test-file:
    description: 'Key file to verify main branch checkout'
    required: false
    default: 'tests/demo-todo-app.spec.ts'

  enable-github-pages:
    description: 'Deploy dashboard to GitHub Pages'
    required: false
    default: 'true'
  web-report-url:
    description: 'Base URL for the dashboard (override)'
    required: false
    default: ''
  artifacts-retention-days:
    description: 'Days to retain uploaded artifacts'
    required: false
    default: '30'
  fail-on-test-failure:
    description: 'Fail job if GUI tests fail'
    required: false
    default: 'false'

  extra-npm-dependencies:
    description: 'Space-separated list of extra npm packages to install'
    required: false
    default: ''
  custom-artifacts-path:
    description: |
      Path containing existing artifacts (used in dashboard-only mode).
      Must contain:
        ‚Ä¢ playwright-summary*.json
        ‚Ä¢ playwright-report/ (HTML & screenshots)
    required: false
    default: ''

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Outputs  (expanded mapping, YAML-safe)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
outputs:
  test-results:
    description: 'Comprehensive JSON summary of GUI test results'
    value: ${{ steps.test-summary.outputs.results }}
  visual-artifacts-path:
    description: 'Path to generated visual artifacts and screenshots'
    value: ${{ steps.setup.outputs.artifacts-path }}
  dashboard-url:
    description: 'URL of the deployed visual dashboard'
    value: ${{ steps.deploy-report.outputs.page_url }}
  test-pass-rate:
    description: 'GUI test pass-rate percentage'
    value: ${{ steps.test-summary.outputs.pass-rate }}
  total-gui-tests:
    description: 'Total number of GUI tests executed'
    value: ${{ steps.test-summary.outputs.total-tests }}
  code-quality-score:
    description: 'Overall code-quality score from linting'
    value: ${{ steps.lint-summary.outputs.quality-score }}
  pr-test-results:
    description: 'JSON summary of PR-branch GUI tests'
    value: ${{ steps.test-summary.outputs.pr-results }}
  main-test-results:
    description: 'JSON summary of main-branch GUI tests'
    value: ${{ steps.test-summary.outputs.main-results }}
  visual-comparison:
    description: 'Visual comparison analysis (PR vs main)'
    value: ${{ steps.test-summary.outputs.visual-comparison }}
  gui-regression-detected:
    description: 'Whether a GUI regression was detected'
    value: ${{ steps.test-summary.outputs.regression-detected }}
  review-checklist-status:
    description: 'Status of the code-review checklist'
    value: ${{ steps.checklist.outputs.status }}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# ‚ñ∏‚ñ∏ Composite run
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
runs:
  using: 'composite'
  steps:

  # 0. Derive switches from mode
  - name: Derive mode switches
    id: modes
    shell: bash
    run: |
      MODE="${{ inputs.mode }}"
      p="${{ inputs.enable-playwright }}"
      l="${{ inputs.enable-lint }}"
      d="${{ inputs.enable-dashboard }}"
      case "$MODE" in
        lint-only)      p="false"; d="false" ;;
        test-only)      l="false"; d="false" ;;
        dashboard-only) p="false"; l="false" ;;
      esac
      echo "playwright=$p" >>"$GITHUB_OUTPUT"
      echo "lint=$l"       >>"$GITHUB_OUTPUT"
      echo "dashboard=$d"  >>"$GITHUB_OUTPUT"

  # 1. Prepare workspace
  - name: Prepare workspace
    id: setup
    shell: bash
    run: |
      mkdir -p artifacts
      echo "artifacts-path=artifacts" >>"$GITHUB_OUTPUT"

  - uses: actions/setup-node@v4
    with:
      node-version: ${{ inputs.node-version }}

  - name: Install npm dependencies
    shell: bash
    run: |
      if [ -f package.json ]; then
        npm ci 2>/dev/null || npm install
      fi
      if [ -n "${{ inputs.extra-npm-dependencies }}" ]; then
        npm install --no-save ${{ inputs.extra-npm-dependencies }}
      fi

  # 2. Lint (conditional)
  - uses: reviewdog/action-setup@v1
    if: steps.modes.outputs.lint == 'true' && github.event_name == 'pull_request'
    with:
      reviewdog_version: latest

  - name: Run ESLint / Prettier
    id: lint
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github-token }}
      REVIEWDOG_REPORTER: ${{ inputs.reviewdog-reporter }}
    run: |
      echo "üîç Linting..."
      if [ -f scripts/lint.js ];                        then node scripts/lint.js
      elif [ -f .gui-test-review-action/scripts/lint.js ]; then node .gui-test-review-action/scripts/lint.js
      elif npx --no-install eslint --version &>/dev/null;  then npx eslint .
      else echo "‚ö†Ô∏è  No lint script found; skipping."; fi
    continue-on-error: true

  # 3. Playwright tests (conditional)
  - name: Install Playwright browsers
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: npx playwright install --with-deps

  - name: Run Playwright tests
    id: gui-tests-pr
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    env:
      PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }}
    run: npx playwright test "${{ inputs.test-files }}"
    continue-on-error: true

  - name: Archive Playwright artifacts
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      [[ -f playwright-summary.json ]] && \
        cp playwright-summary.json artifacts/playwright-summary-pr.json
      [[ -f playwright-metrics.json  ]] && \
        cp playwright-metrics.json  artifacts/
      if [[ -d playwright-report ]]; then
        mkdir -p artifacts/pr-report
        mv playwright-report/* artifacts/pr-report/
      fi
    continue-on-error: true

  # 4. Dashboard-only: copy provided artifacts (skip if already in artifacts/)
  - name: Copy provided artifacts
    if: inputs.mode == 'dashboard-only'
    shell: bash
    run: |
      SRC="${{ inputs.custom-artifacts-path }}"
      if [ "$SRC" != "artifacts" ] && [ -d "$SRC" ]; then
        echo "üì¶ Copying artifacts from $SRC"
        cp -R "$SRC/." artifacts/
      fi

  # 5. Dashboard generation
  - name: Generate flowchart
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      if [ -f scripts/generate-flowchart.js ]; then node scripts/generate-flowchart.js; fi
    continue-on-error: true

  - name: Build dashboard
    id: dashboard
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      if [ -f scripts/generate-webpage.js ]; then node scripts/generate-webpage.js; fi
    continue-on-error: true

  # 6. Create Pages tarball & deploy (no duplicate plain upload)
  - uses: actions/upload-pages-artifact@v3
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    with:
      name: gui-test-visual-artifacts
      path: artifacts/web-report
    continue-on-error: true

  - name: Deploy dashboard to GitHub Pages
    id: deploy-report
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    uses: actions/deploy-pages@v4
    with:
      artifact_name: gui-test-visual-artifacts
    continue-on-error: true

  # 7. PR comment (still conditioned on github.event_name)
  - name: Post PR comment
    if: steps.modes.outputs.dashboard == 'true' && inputs.mode != 'dashboard-only' && github.event_name == 'pull_request'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      WEB_REPORT_URL: ${{ inputs.web-report-url || steps.deploy-report.outputs.page_url }}
    run: |
      if [ -f scripts/summary-comment.js ]; then node scripts/summary-comment.js; fi
    continue-on-error: true

  # 8. Summaries & metrics
  - name: Summarise tests
    id: test-summary
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      echo "üìà Summarising tests‚Ä¶"
      # (summary logic omitted for brevity)
    continue-on-error: true

  - name: Extract quality metrics
    id: lint-summary
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    run: |
      echo "üìà Calculating quality score‚Ä¶"
      # (metrics logic omitted for brevity)
    continue-on-error: true

  # 9. Optional failure gate
  - name: Validate test results
    if: steps.modes.outputs.playwright == 'true' && inputs.fail-on-test-failure == 'true'
    shell: bash
    run: |
      if [[ -f artifacts/playwright-summary-pr.json ]]; then
        FAILED=$(jq -r '.failed' artifacts/playwright-summary-pr.json)
        if [[ "$FAILED" != "0" ]]; then
          echo "::error::Playwright tests failed"
          exit 1
        fi
      fi

  # 10. Done
  - name: Finish
    shell: bash
    run: echo "‚úÖ GUI-Based Testing Code Review action completed."
