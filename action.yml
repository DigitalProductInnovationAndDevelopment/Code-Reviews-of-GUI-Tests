# ───────────────────────────────────────────────────────────────
#  GUI-BASED TESTING CODE REVIEW – MODULAR COMPOSITE ACTION
#  Version: v1.0.11  (all previous errors addressed)
# ───────────────────────────────────────────────────────────────
name: 'GUI-Based Testing Code Review'
description: 'Playwright GUI tests + ESLint/Prettier + visual dashboard, checklist & PR comment'
author: 'Digital Product Innovation and Development – TUM'

branding:
  icon: 'eye'
  color: 'purple'

# ──────────────────
# Inputs
# ──────────────────
inputs:
  github-token:
    description: 'GitHub token (or PAT) for API calls'
    required: true
    default: ${{ github.token }}

  # execution mode
  mode:
    description: |
      full            – run lint, tests, dashboard
      lint-only       – only lint
      test-only       – only Playwright
      dashboard-only  – build dashboard from given artifacts
    required: false
    default: 'full'

  enable-playwright: { description: 'Run Playwright',              default: 'true' }
  enable-lint:       { description: 'Run ESLint / Prettier',       default: 'true' }
  enable-dashboard:  { description: 'Create dashboard / checklist',default: 'true' }

  enable-pr-comments:            # NEW – avoids “Unexpected input” warning
    description: 'Post summary comment on PRs'
    required: false
    default: 'true'

  test-files:        { default: 'tests', description: 'Folder/glob for Playwright' }
  node-version:      { default: '18',    description: 'Node.js version' }
  playwright-config: { default: 'playwright.config.js' }
  reviewdog-reporter:{ default: 'github-pr-review' }
  main-branch:       { default: 'main' }
  key-test-file:     { default: 'tests/demo-todo-app.spec.ts' }

  enable-github-pages:{ default: 'true' }
  web-report-url:     { default: '' }
  artifacts-retention-days:{ default: '30' }
  fail-on-test-failure:{ default: 'false' }

  extra-npm-dependencies:{ default: '' }
  custom-artifacts-path:{ default: '', description: 'Dashboard-only: folder with artifacts' }

# ──────────────────
# Outputs
# ──────────────────
outputs:
  test-results:            { value: ${{ steps.test-summary.outputs.results }} }
  visual-artifacts-path:   { value: ${{ steps.setup.outputs.artifacts-path }} }
  dashboard-url:           { value: ${{ steps.deploy-report.outputs.page_url }} }
  test-pass-rate:          { value: ${{ steps.test-summary.outputs.pass-rate }} }
  total-gui-tests:         { value: ${{ steps.test-summary.outputs.total-tests }} }
  code-quality-score:      { value: ${{ steps.lint-summary.outputs.quality-score }} }
  pr-test-results:         { value: ${{ steps.test-summary.outputs.pr-results }} }
  main-test-results:       { value: ${{ steps.test-summary.outputs.main-results }} }
  visual-comparison:       { value: ${{ steps.test-summary.outputs.visual-comparison }} }
  gui-regression-detected: { value: ${{ steps.test-summary.outputs.regression-detected }} }
  review-checklist-status: { value: ${{ steps.checklist.outputs.status }} }

# ──────────────────
# Composite run
# ──────────────────
runs:
  using: 'composite'
  steps:

  # 0 – derive switches from mode
  - id: modes
    name: Set feature flags
    shell: bash
    run: |
      p=${{ inputs.enable-playwright }}
      l=${{ inputs.enable-lint }}
      d=${{ inputs.enable-dashboard }}
      case "${{ inputs.mode }}" in
        lint-only)      p=false d=false ;;
        test-only)      l=false d=false ;;
        dashboard-only) p=false l=false ;;
      esac
      echo "playwright=$p" >> $GITHUB_OUTPUT
      echo "lint=$l"       >> $GITHUB_OUTPUT
      echo "dashboard=$d"  >> $GITHUB_OUTPUT

  # 1 – basic setup
  - name: Prepare workspace
    id: setup
    shell: bash
    run: |
      mkdir -p artifacts
      echo "artifacts-path=artifacts" >> $GITHUB_OUTPUT

  - uses: actions/setup-node@v4
    with: { node-version: ${{ inputs.node-version }} }

  - name: Install npm packages
    shell: bash
    run: |
      if [ -f package.json ]; then npm ci 2>/dev/null || npm install; fi
      [ -n "${{ inputs.extra-npm-dependencies }}" ] && \
        npm install --no-save ${{ inputs.extra-npm-dependencies }}

  # 2 – lint (conditional)
  - uses: reviewdog/action-setup@v1
    if: steps.modes.outputs.lint == 'true' && github.event_name == 'pull_request'
    with: { reviewdog_version: latest }

  - name: ESLint / Prettier
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    env:
      REVIEWDOG_GITHUB_API_TOKEN: ${{ inputs.github-token }}
      REVIEWDOG_REPORTER: ${{ inputs.reviewdog-reporter }}
    run: |
      if [ -f scripts/lint.js ]; then node scripts/lint.js
      elif npx --no-install eslint --version 2>/dev/null; then npx eslint .
      else echo "ℹ️  No lint script"; fi
    continue-on-error: true

  # 3 – Playwright (conditional)
  - name: Install Playwright browsers
    if: steps.modes.outputs.playwright == 'true'
    run: npx playwright install --with-deps
    shell: bash

  - name: Run Playwright
    if: steps.modes.outputs.playwright == 'true'
    env: { PLAYWRIGHT_CONFIG: ${{ inputs.playwright-config }} }
    shell: bash
    run: npx playwright test "${{ inputs.test-files }}"
    continue-on-error: true

  - name: Collect Playwright artifacts
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: |
      [[ -f playwright-summary.json ]] && mv playwright-summary.json artifacts/playwright-summary-pr.json
      [[ -f playwright-metrics.json ]] && mv playwright-metrics.json artifacts/
      [[ -d playwright-report ]] && \
        { mkdir -p artifacts/pr-report; mv playwright-report/* artifacts/pr-report/; }
    continue-on-error: true

  # 4 – dashboard-only mode: copy provided artifacts
  - name: Import external artifacts
    if: inputs.mode == 'dashboard-only'
    shell: bash
    run: |
      SRC="${{ inputs.custom-artifacts-path }}"
      if [[ "$SRC" != "artifacts" && -d "$SRC" ]]; then
        echo "Copy from $SRC → artifacts/"
        cp -R "$SRC/." artifacts/
      fi

  # 5 – checklist (run whenever dashboard enabled)
  - id: checklist
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      [ -f scripts/checklist.js ] && node scripts/checklist.js || \
      echo '{"md":"*checklist unavailable*"}' > artifacts/checklist.json
    continue-on-error: true

  # 6 – ensure metrics file for flowchart
  - name: Locate metrics file
    if: steps.modes.outputs.dashboard == 'true'
    shell: bash
    run: |
      F=$(find artifacts -name playwright-metrics.json | head -n1 || true)
      [ -n "$F" ] && cp "$F" playwright-metrics.json

  # 7 – flowchart + dashboard HTML
  - name: Generate flow-chart PNG
    if: steps.modes.outputs.dashboard == 'true'
    run: |
      [ -f scripts/generate-flowchart.js ] && node scripts/generate-flowchart.js
    continue-on-error: true

  - name: Build dashboard HTML
    id: dashboard
    if: steps.modes.outputs.dashboard == 'true'
    run: |
      [ -f scripts/generate-webpage.js ] && node scripts/generate-webpage.js
    shell: bash
    continue-on-error: true

  # 8 – upload Pages tarball & deploy
  - uses: actions/upload-pages-artifact@v3
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    with:
      name: gui-test-visual-artifacts
      path: artifacts/web-report

  - id: deploy-report
    name: Deploy to GitHub Pages
    if: steps.modes.outputs.dashboard == 'true' && inputs.enable-github-pages == 'true'
    uses: actions/deploy-pages@v4
    with: { artifact_name: gui-test-visual-artifacts }
    continue-on-error: true

  # 9 – PR comment (now controlled by enable-pr-comments)
  - name: Post PR comment
    if: steps.modes.outputs.dashboard == 'true' &&
        inputs.enable-pr-comments == 'true' &&
        github.event_name == 'pull_request'
    shell: bash
    env:
      GITHUB_TOKEN: ${{ inputs.github-token }}
      WEB_REPORT_URL: ${{ inputs.web-report-url || steps.deploy-report.outputs.page_url }}
    run: |
      [ -f scripts/summary-comment.js ] && node scripts/summary-comment.js
    continue-on-error: true

  # 10 – summaries & optional fail-fast
  - id: test-summary
    if: steps.modes.outputs.playwright == 'true'
    shell: bash
    run: echo '📈 summarise tests (logic omitted)'
    continue-on-error: true

  - id: lint-summary
    if: steps.modes.outputs.lint == 'true'
    shell: bash
    run: echo '📈 calculate lint metrics (logic omitted)'
    continue-on-error: true

  - name: Fail on test failure
    if: steps.modes.outputs.playwright == 'true' && inputs.fail-on-test-failure == 'true'
    shell: bash
    run: |
      if jq -e '.failed>0' artifacts/playwright-summary-pr.json >/dev/null 2>&1; then
        echo "::error::Playwright tests failed"; exit 1; fi

  - name: Done
    shell: bash
    run: echo "✅ GUI-Based Testing Code Review finished."
