name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
       
jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install NPM dependencies
        run: npm install
      
      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }
      
      - name: Run lint script for reports  
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node scripts/lint.js
        continue-on-error: true

        # Checkout base branch version of test files (if they exist)
      - name: Checkout base (main) branch version of test files
        run: |
          mkdir base-tests || true
          for file in $(git diff --name-only origin/main HEAD -- tests/); do
            if git ls-tree origin/main "$file" > /dev/null 2>&1; then
              mkdir -p "base-tests/$(dirname "$file")"
              git show origin/main:"$file" > "base-tests/$file"
            fi
          done

      # Run Playwright tests on base version
      - name: Run Playwright on base version
        run: |
          rm -rf tests
          cp -r base-tests tests
          npx playwright test --reporter=html --output=base-report || echo "Base test run failed or skipped"
          npx playwright show-report base-report --reporter=html --output=base-html-report

      - name: Upload base HTML report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: base-playwright-html-report
          path: base-html-report/
      
      - name: Save PR version of test files
        run: |
          if [ -d tests ]; then
            mkdir -p pr-tests
            cp -r tests/ pr-tests/
          else
            echo "tests/ directory not found; skipping copy."
          fi

      - name: Restore PR version of test files
        run: |
          if [ -d pr-tests ]; then
            rm -rf tests
            cp -r pr-tests tests
          else
            echo "No pr-tests directory found to restore from."
          fi
      
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
        continue-on-error: true
  
  deploy-report:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: Retry deployment if failed
        if: failure()
        uses: actions/deploy-pages@v4
        continue-on-error: true
        timeout-minutes: 10
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true