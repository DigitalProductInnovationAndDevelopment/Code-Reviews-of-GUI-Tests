# .github/workflows/gui-test-review.yml
name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
####################################################################
# 1) Build, lint, test and create artefacts                        #
####################################################################
  review-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    # â”€â”€ checkout & Node â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-node@v4
      with:
        node-version: 18

    # â”€â”€ reviewdog CLI â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: reviewdog/action-setup@v1
      with:
        reviewdog_version: latest

    # â”€â”€ dependencies â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Install NPM dependencies
      run: npm install

    # â”€â”€ Lint (Prettier + ESLint) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Lint, Prettier & ESLint
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: node scripts/lint.js --strict
      continue-on-error: true         # keep pipeline alive for later steps

    # â”€â”€ Playwright test run (creates playwright-metrics.json) â”€â”€â”€â”€â”€
      # Playwright test run
    - name: Playwright tests
      env:
        PLAYWRIGHT_JSON_OUTPUT_NAME: playwright-metrics.json
      run: node scripts/playwright-test.js


    # â”€â”€ Flow-chart PNG & HTML dashboard â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Generate flow-chart
      run: node scripts/generate-flowchart.js

    - name: Build checklist
      run: node scripts/checklist.js

    - name: Build static HTML report
      run: node scripts/generate-webpage.js

    # â”€â”€ Badge text for PR summary comment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Create test-summary badge
      if: always()
      run: |
        jq -r '"Total: \(.stats.total) | Passed: \(.stats.passed) | Failed: \(.stats.failed) | Skipped: \(.stats.skipped)"' \
          playwright-metrics.json > artifacts/test-summary.txt

    # â”€â”€ Upload artefacts (reports + summaries) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: actions/upload-artifact@v4
      with:
        name: gui-artifacts
        path: artifacts/

    # â”€â”€ FINAL gate: fail job if ESLint errors remain â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Fail build when ESLint errors remain
      if: always()
      run: |
        ERRORS=$(jq '.eslint.errors' artifacts/lint-summary.json)
        if [ "$ERRORS" -gt 0 ]; then
          echo "::error::ESLint found $ERRORS error(s) â€“ failing job"
          exit 1
        fi

####################################################################
# 2) Publish the HTML dashboard via GitHub Pages                   #
####################################################################
  deploy-report:
    needs: review-assistant
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
    - name: Download artefacts
      uses: actions/download-artifact@v4
      with:
        name: gui-artifacts
        path: gui-artifacts

    - name: Upload Pages artefact
      uses: actions/upload-pages-artifact@v3
      with:
        path: gui-artifacts/web-report

    - name: Deploy to GitHub Pages
      id: deploy
      uses: actions/deploy-pages@v4

####################################################################
# 3) Sticky PR comment with comment-identifier                     #
####################################################################
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - name: Checkout (required by the action)
      uses: actions/checkout@v4

    - name: Download artefacts
      uses: actions/download-artifact@v4
      with:
        name: gui-artifacts
        path: gui-artifacts

    - name: Post / update link to HTML dashboard
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        edit-mode: replace
        comment-id: gui-test-review
        body: |
          ðŸ‘‹ **Hello!**

          Your GUI-test results are ready:  
          **[ðŸ“Š View the latest dashboard â†—](https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html)**

          _This comment is automatically updated on every push._
