name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
####################################################################
# 1) Build, lint, test and create artefacts                        #
####################################################################
  review-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    # ── checkout & Node ────────────────────────────────────────────
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - uses: actions/setup-node@v4
      with: { node-version: 18 }

    # ── reviewdog binary ───────────────────────────────────────────
    - uses: reviewdog/action-setup@v1
      with: { reviewdog_version: latest }

    # ── dependencies ───────────────────────────────────────────────
    - name: Install NPM dependencies
      run: npm install

    # ── Lint (Prettier + ESLint) – inline via reviewdog ────────────
    #     • NOT strict → step exits 0 even with ESLint errors
    - name: Lint, Prettier & ESLint
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: node scripts/lint.js
      continue-on-error: true

    # ── Playwright test run (writes playwright-metrics.json) ───────
    - name: Playwright tests
      run: node scripts/playwright-test.js

    # ── Flow-chart PNG & HTML dashboard generation ────────────────
    - name: Generate flow-chart
      run: node scripts/generate-flowchart.js

    - name: Build checklist
      run: node scripts/checklist.js

    - name: Build static HTML report
      run: node scripts/generate-webpage.js

    # ── Build Playwright badge text for PR comment ───────────────────
    - name: Create test-summary badge
      run: |
        jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
          artifacts/playwright-summary.json > artifacts/test-summary.txt


    # ── Upload all artefacts (reports + summaries) ────────────────
    - uses: actions/upload-artifact@v4
      with:
        name: gui-artifacts
        path: artifacts/

####################################################################
# 2) Publish the HTML dashboard via GitHub Pages                   #
####################################################################
  deploy-report:
    needs: review-assistant
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
    - uses: actions/download-artifact@v4
      with: { name: gui-artifacts, path: gui-artifacts }

    - uses: actions/upload-pages-artifact@v3
      with: { path: gui-artifacts/web-report }

    - id: deploy
      uses: actions/deploy-pages@v4

####################################################################
# 3) Sticky PR comment – summary & links                           #
####################################################################
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts

      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
