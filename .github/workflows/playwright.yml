name: GUI Test Review

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode (full, test-only, lint-only, dashboard-only)'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - test-only
          - lint-only
          - dashboard-only
          - comment-only
      skip-tests:
        description: 'Skip Playwright tests'
        required: false
        default: false
        type: boolean
      skip-eslint:
        description: 'Skip ESLint checks'
        required: false
        default: false
        type: boolean
      skip-prettier:
        description: 'Skip Prettier checks'
        required: false
        default: false
        type: boolean

jobs:
  # ────────────────────────────────────────────────────────────
  # This job runs tests and generates artifacts
  test:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    if: ${{ github.event.inputs.skip-tests != 'true' && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'test-only' || !github.event.inputs.mode) }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      - name: Install Playwright
        run: npx playwright install --with-deps

      # Run Playwright tests on PR branch
      - name: Playwright tests (PR branch)
        run: |
          mkdir -p artifacts
          npx playwright test --reporter=json > artifacts/playwright-metrics.json
        continue-on-error: true

      - name: Copy PR summary JSON
        run: |
          if [[ -f artifacts/playwright-metrics.json ]]; then
            cp artifacts/playwright-metrics.json artifacts/playwright-summary.json
            cp artifacts/playwright-metrics.json artifacts/playwright-summary-pr.json
          else
            echo "{}" > artifacts/playwright-summary-pr.json
            echo "{}" > artifacts/playwright-summary.json
          fi

      - name: Archive PR HTML report
        run: |
          mkdir -p artifacts/pr-report
          if [[ -d playwright-report ]]; then
            cp -r playwright-report/* artifacts/pr-report/ || echo "no report"
          fi
        continue-on-error: true

      # Run tests on main branch for comparison if needed
      - name: Playwright tests (Main branch comparison)
        run: |
          git checkout origin/main -- tests/ playwright.config.js || true
          npx playwright test --reporter=json > artifacts/playwright-metrics-main.json
        continue-on-error: true

      - name: Copy Main summary JSON
        run: |
          if [[ -f artifacts/playwright-metrics-main.json ]]; then
            cp artifacts/playwright-metrics-main.json artifacts/playwright-summary-main.json
          else
            echo "{}" > artifacts/playwright-summary-main.json
          fi

      - name: Archive Main HTML report
        run: |
          mkdir -p artifacts/main-report
          if [[ -d playwright-report ]]; then
            cp -r playwright-report/* artifacts/main-report/ || echo "no report"
          fi
        continue-on-error: true

      # Restore checkout
      - run: git checkout HEAD -- tests/ playwright.config.js

      # Upload test artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: artifacts/
          retention-days: 30
  
  # ────────────────────────────────────────────────────────────
  # This job runs linting and generates artifacts
  lint:
    runs-on: ubuntu-latest
    permissions: { contents: read, pull-requests: write }
    if: ${{ github.event.inputs.skip-eslint != 'true' && github.event.inputs.skip-prettier != 'true' && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'lint-only' || !github.event.inputs.mode) }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }

      - name: Run lint (ESLint + Prettier)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_ESLINT: ${{ github.event.inputs.skip-eslint || 'false' }}
          SKIP_PRETTIER: ${{ github.event.inputs.skip-prettier || 'false' }}
          USE_PROJECT_ESLINT: 'true'
          USE_PROJECT_PRETTIER: 'true'
        run: |
          mkdir -p artifacts
          node scripts/lint.js || true
          
          # Ensure lint-summary.json exists even if linting failed
          if [[ ! -f artifacts/lint-summary.json ]]; then
            echo '{"prettier":{"filesWithIssues":0,"totalChanges":0,"files":[]},"eslint":{"files":0,"errors":0,"warnings":0}}' > artifacts/lint-summary.json
          fi
        continue-on-error: true

      # Upload lint artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts
          path: artifacts/
          retention-days: 30
  
  # ────────────────────────────────────────────────────────────
  # This job generates dashboard and prepares the GitHub Pages content
  build:
    needs: [test, lint]
    if: ${{ always() && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'dashboard-only' || !github.event.inputs.mode) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      # Create artifacts directory
      - name: Create directories
        run: |
          mkdir -p combined-artifacts
          mkdir -p combined-artifacts/web-report

      # Download artifacts from previous jobs
      - uses: actions/download-artifact@v4
        with:
          name: playwright-artifacts
          path: playwright-artifacts/
        continue-on-error: true

      - uses: actions/download-artifact@v4
        with:
          name: lint-artifacts
          path: lint-artifacts/
        continue-on-error: true

      # Merge artifacts
      - name: Combine artifacts
        run: |
          # Copy playwright artifacts
          if [[ -d playwright-artifacts ]]; then
            cp -r playwright-artifacts/* combined-artifacts/
            echo "Copied playwright artifacts"
          fi
          
          # Copy lint artifacts
          if [[ -d lint-artifacts ]]; then
            cp -r lint-artifacts/* combined-artifacts/
            echo "Copied lint artifacts"
          fi
          
          # Ensure required files exist
          if [[ ! -f combined-artifacts/playwright-metrics.json ]]; then
            cp combined-artifacts/playwright-summary.json combined-artifacts/playwright-metrics.json || echo "{}" > combined-artifacts/playwright-metrics.json
            echo "Created playwright-metrics.json fallback"
          fi
          
          if [[ ! -f combined-artifacts/lint-summary.json ]]; then
            echo '{"prettier":{"filesWithIssues":0,"totalChanges":0,"files":[]},"eslint":{"files":0,"errors":0,"warnings":0}}' > combined-artifacts/lint-summary.json
            echo "Created lint-summary.json fallback"
          fi
          
          # List all files in combined-artifacts
          echo "Combined artifacts contents:"
          ls -la combined-artifacts/

      # Create checklist file manually if it doesn't exist
      - name: Ensure checklist exists
        run: |
          if [[ ! -f combined-artifacts/checklist.md ]]; then
            echo "- [x] GitHub Action triggered" > combined-artifacts/checklist.md
            echo "- [$([ -f combined-artifacts/playwright-summary-pr.json ] && echo "x" || echo " ")] Playwright tests completed" >> combined-artifacts/checklist.md
            echo "- [$([ -f combined-artifacts/lint-summary.json ] && echo "x" || echo " ")] ESLint executed" >> combined-artifacts/checklist.md
            echo "- [$([ -f combined-artifacts/lint-summary.json ] && echo "x" || echo " ")] Prettier check completed" >> combined-artifacts/checklist.md
            echo "- [$([ -f combined-artifacts/playwright-summary-pr.json ] && echo "x" || echo " ")] Test summary generated" >> combined-artifacts/checklist.md
            echo "- [ ] Flowchart created" >> combined-artifacts/checklist.md
            
            # Create JSON version too
            echo "{\"md\":\"$(cat combined-artifacts/checklist.md | tr '\n' '\\n')\"}" > combined-artifacts/checklist.json
          fi

      # Create simple dashboard HTML page if generate-webpage.js fails
      - name: Create simple dashboard
        run: |
          # Create simple HTML dashboard as fallback
          cat > combined-artifacts/web-report/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>GUI Test Dashboard</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                  body {font:15px/1.6 system-ui,sans-serif;background:#fafafa;margin:0;padding:2rem}
                  h1 {font-size:2rem;margin-bottom:1.2rem}
                  .card {background:#fff;border-radius:12px;box-shadow:0 2px 8px rgba(0,0,0,.08);padding:1.3rem;margin-bottom:1.3rem}
                  pre {background:#2d2d2d;color:#f8f8f2;padding:1rem;border-radius:8px;overflow:auto;font-size:13px;margin-top:.6em}
              </style>
          </head>
          <body>
              <h1>🔍 GUI Test Dashboard</h1>
              <div class="card">
                  <h2>Checklist</h2>
                  <pre>$(cat combined-artifacts/checklist.md)</pre>
              </div>
              <div class="card">
                  <h2>Test Summary</h2>
                  <p>PR Tests: $(jq -r '.total // 0' combined-artifacts/playwright-summary-pr.json || echo "0") total, 
                  $(jq -r '.passed // 0' combined-artifacts/playwright-summary-pr.json || echo "0") passed, 
                  $(jq -r '.failed // 0' combined-artifacts/playwright-summary-pr.json || echo "0") failed</p>
              </div>
              <div class="card">
                  <h2>Lint Results</h2>
                  <p>ESLint: $(jq -r '.eslint.errors // 0' combined-artifacts/lint-summary.json || echo "0") errors, 
                  $(jq -r '.eslint.warnings // 0' combined-artifacts/lint-summary.json || echo "0") warnings</p>
                  <p>Prettier: $(jq -r '.prettier.filesWithIssues // 0' combined-artifacts/lint-summary.json || echo "0") files with issues</p>
              </div>
              <footer style="font-size:.8rem;color:#666;margin-top:2rem">
                  Generated $(date)
              </footer>
          </body>
          </html>
          EOF

      # Try to generate the full dashboard
      - name: Try to generate full dashboard
        run: |
          # Copy playwright-metrics.json to the working directory
          cp combined-artifacts/playwright-metrics.json playwright-metrics.json || true
          
          # Try to run flowchart generation
          if [[ -f scripts/generate-flowchart.js ]]; then
            node scripts/generate-flowchart.js || echo "Flowchart generation failed (non-critical)"
            
            # If flowchart was generated, copy it to web-report
            if [[ -f artifacts/flowchart.png ]]; then
              mkdir -p combined-artifacts/web-report
              cp artifacts/flowchart.png combined-artifacts/web-report/
            fi
          fi
          
          # Set environment variable for webpage generation
          export ARTIFACTS_DIR=combined-artifacts
          
          # Try to run dashboard generation
          if [[ -f scripts/generate-webpage.js ]]; then
            # Make a backup of the script
            cp scripts/generate-webpage.js scripts/generate-webpage.js.bak
            
            # Modify the script to handle undefined properties safely
            sed -i 's/p\.filesWithIssues/(p \&\& p.filesWithIssues) || 0/g' scripts/generate-webpage.js
            sed -i 's/p\.totalChanges/(p \&\& p.totalChanges) || 0/g' scripts/generate-webpage.js
            sed -i 's/p\.files/(p \&\& p.files) || \[\]/g' scripts/generate-webpage.js
            sed -i 's/e\.errors/(e \&\& e.errors) || 0/g' scripts/generate-webpage.js
            sed -i 's/e\.warnings/(e \&\& e.warnings) || 0/g' scripts/generate-webpage.js
            sed -i 's/e\.fixableErrors/(e \&\& e.fixableErrors) || 0/g' scripts/generate-webpage.js
            sed -i 's/e\.fixableWarnings/(e \&\& e.fixableWarnings) || 0/g' scripts/generate-webpage.js
            sed -i 's/e\.first/(e \&\& e.first) || ""/g' scripts/generate-webpage.js
            
            # Run the modified script
            node scripts/generate-webpage.js || echo "Dashboard generation script failed (using fallback)"
          fi
        continue-on-error: true

      # Upload dashboard artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: gui-dashboard
          path: combined-artifacts/
          retention-days: 30
      
      # Upload specifically for GitHub Pages deployment using the official method
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: combined-artifacts/web-report/

      # Add PR comment with link to artifacts
      - name: Add PR comment with artifacts link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}/artifacts`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 GUI Test Artifacts Available
              
              The dashboard has been generated and is available as an artifact.
              
              [⬇️ Download Dashboard Artifacts](${artifactUrl})
              
              GitHub Pages deployment will be attempted next.
              `
            });
  
  # This is the dedicated deployment job for GitHub Pages
  # This follows GitHub's recommended pattern exactly
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    # Grant GITHUB_TOKEN the permissions required for this job
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Specify that we're deploying to GitHub Pages
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  # Add the URL comment to the PR after deployment
  comment:
    needs: deploy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Comment on PR with deployment URL
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 GUI Test Dashboard Deployed
              
              The dashboard has been successfully deployed to GitHub Pages:
              
              [🔍 View Dashboard](${deploymentUrl})
              `
            });
        env:
          DEPLOYMENT_URL: ${{ needs.deploy.outputs.url }}