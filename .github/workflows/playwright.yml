name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install dependencies
        run: npm install
      
      # Run your scripts for reporting first
      - name: Run existing lint script for reporting
        run: |
          # Modify lint.js temporarily to disable reviewdog
          cp scripts/lint.js scripts/lint.js.bak
          cat > scripts/lint-for-report.js << 'EOF'
          #!/usr/bin/env node
          const { execSync } = require('child_process');
          const fs = require('fs');

          function runPrettier() {
            console.log('\n▶ Prettier check');
            let filesToFormat = [];
            try {
              execSync('npx prettier --check "tests/**/*.{js,ts,tsx,json}"', { stdio: 'inherit' });
            } catch (error) {
              const output = error.stdout?.toString() || '';
              const matches = output.match(/[^\s]+\.(js|ts|tsx|json)/g);
              if (matches) {
                filesToFormat = matches.filter(file => file.startsWith('tests/'));
              }
            }
            
            return {
              filesWithIssues: filesToFormat.length,
              files: filesToFormat
            };
          }

          function runESLint() {
            console.log('\n▶ ESLint');
            let raw = '';
            try {
              raw = execSync('npx eslint tests --ext .js,.ts,.tsx -f json', { encoding: 'utf8' });
            } catch (e) {
              raw = e.stdout?.toString() || '';
            }
            
            const results = raw ? JSON.parse(raw) : [];
            let errors = 0, warnings = 0, fixErr = 0, fixWarn = 0, first = '', files = new Set();

            results.forEach(f => {
              if (f.messages.length) files.add(f.filePath);
              f.messages.forEach(m => {
                if (m.severity === 2) {
                  errors++;
                  if (m.fix) fixErr++;
                  if (!first) first = `${m.ruleId || 'unknown-rule'} in ${f.filePath}:${m.line}`;
                } else if (m.severity === 1) {
                  warnings++;
                  if (m.fix) fixWarn++;
                }
              });
            });

            return {
              files: files.size,
              errors,
              warnings,
              fixableErrors: fixErr,
              fixableWarnings: fixWarn,
              first
            };
          }

          const prettier = runPrettier();
          const eslint = runESLint();

          fs.mkdirSync('artifacts', { recursive: true });
          fs.writeFileSync('artifacts/lint-summary.json', JSON.stringify({ prettier, eslint }, null, 2));
          console.log('📝 artifacts/lint-summary.json written');
          EOF
          
          chmod +x scripts/lint-for-report.js
          node scripts/lint-for-report.js
        continue-on-error: true
      
      - name: Playwright tests
        run: node scripts/playwright-test.js
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
      
      - name: Build checklist
        run: node scripts/checklist.js
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
      
      - name: Create test-summary badge
        run: |
          jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
            artifacts/playwright-summary.json > artifacts/test-summary.txt
      
      # Set up reviewdog for annotations
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      
      # Run Prettier and generate diffs for reviewdog
      - name: Run Prettier with suggestions
        run: |
          # Run prettier and generate diffs
          mkdir -p prettier_diffs
          FILES=$(npx prettier --list-different "tests/**/*.{js,ts,tsx,json}" || echo "")
          
          if [ -n "$FILES" ]; then
            echo "Found files with formatting issues:"
            echo "$FILES"
            
            # For each file, generate a proper diff
            for FILE in $FILES; do
              echo "Processing $FILE"
              # Create a formatted version
              FORMATTED=$(npx prettier "$FILE")
              # Save the formatted version
              TEMP_FILE="prettier_diffs/$(basename "$FILE").formatted"
              echo "$FORMATTED" > "$TEMP_FILE"
              
              # Generate a diff
              DIFF_FILE="prettier_diffs/$(basename "$FILE").diff"
              diff -u "$FILE" "$TEMP_FILE" > "$DIFF_FILE" || true
              
              # Add proper git diff headers
              sed -i "1s|---|--- a/$FILE|" "$DIFF_FILE"
              sed -i "2s|+++|+++ b/$FILE|" "$DIFF_FILE"
              
              # Run reviewdog on this diff
              cat "$DIFF_FILE" | reviewdog -f=diff -name=prettier -reporter=github-pr-review -filter-mode=nofilter -fail-on-error=false
            done
          else
            echo "No files with formatting issues found"
          fi
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Run ESLint with reviewdog for annotations
      - name: ESLint Check
        uses: reviewdog/action-eslint@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          eslint_flags: "tests --ext .js,.ts,.tsx"
          fail_on_error: false
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
  
  deploy-report:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
      
      - id: deploy
        uses: actions/deploy-pages@v4
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js