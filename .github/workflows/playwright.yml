name: GUI Test Review

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode (full, test-only, lint-only, dashboard-only)'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - test-only
          - lint-only
          - dashboard-only
          - comment-only
      skip-tests:
        description: 'Skip Playwright tests'
        required: false
        default: false
        type: boolean
      skip-eslint:
        description: 'Skip ESLint checks'
        required: false
        default: false
        type: boolean
      skip-prettier:
        description: 'Skip Prettier checks'
        required: false
        default: false
        type: boolean

jobs:
  # ────────────────────────────────────────────────────────────
  # This job runs tests and generates artifacts
  test:
    runs-on: ubuntu-latest
    permissions: { contents: read }
    if: ${{ github.event.inputs.skip-tests != 'true' && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'test-only' || !github.event.inputs.mode) }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      - name: Install Playwright
        run: npx playwright install --with-deps

      # Run Playwright tests on PR branch
      - name: Playwright tests (PR branch)
        run: node scripts/playwright-test.js || true
        continue-on-error: true

      - name: Copy PR summary JSON
        run: |
          mkdir -p artifacts
          if [[ -f artifacts/playwright-summary.json ]]; then
            cp artifacts/playwright-summary.json artifacts/playwright-summary-pr.json
          else
            echo "{}" > artifacts/playwright-summary-pr.json
          fi

      - name: Archive PR HTML report
        run: |
          mkdir -p artifacts/pr-report
          if [[ -d playwright-report ]]; then
            cp -r playwright-report/* artifacts/pr-report/ || echo "no report"
          fi
        continue-on-error: true

      # Run tests on main branch for comparison if needed
      - name: Playwright tests (Main branch comparison)
        run: |
          git checkout origin/main -- tests/ playwright.config.js || true
          node scripts/playwright-test.js || true
        continue-on-error: true

      - name: Copy Main summary JSON
        run: |
          mkdir -p artifacts
          if [[ -f artifacts/playwright-summary.json ]]; then
            cp artifacts/playwright-summary.json artifacts/playwright-summary-main.json
          else
            echo "{}" > artifacts/playwright-summary-main.json
          fi

      - name: Archive Main HTML report
        run: |
          mkdir -p artifacts/main-report
          if [[ -d playwright-report ]]; then
            cp -r playwright-report/* artifacts/main-report/ || echo "no report"
          fi
        continue-on-error: true

      # Restore checkout
      - run: git checkout HEAD -- tests/ playwright.config.js

      # Upload test artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: playwright-artifacts
          path: artifacts/
          retention-days: 30
  
  # ────────────────────────────────────────────────────────────
  # This job runs linting and generates artifacts
  lint:
    runs-on: ubuntu-latest
    permissions: { contents: read, pull-requests: write }
    if: ${{ github.event.inputs.skip-eslint != 'true' && github.event.inputs.skip-prettier != 'true' && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'lint-only' || !github.event.inputs.mode) }}

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }

      - name: Run lint (ESLint + Prettier)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SKIP_ESLINT: ${{ github.event.inputs.skip-eslint || 'false' }}
          SKIP_PRETTIER: ${{ github.event.inputs.skip-prettier || 'false' }}
          USE_PROJECT_ESLINT: 'true'
          USE_PROJECT_PRETTIER: 'true'
        run: node scripts/lint.js
        continue-on-error: true

      # Upload lint artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: lint-artifacts
          path: artifacts/
          retention-days: 30
  
  # ────────────────────────────────────────────────────────────
  # This job generates dashboard, uploads to Pages, and adds PR comments
  # It's split into build and deploy steps following GitHub's recommended pattern
  build:
    needs: [test, lint]
    if: ${{ always() && (github.event.inputs.mode == 'full' || github.event.inputs.mode == 'dashboard-only' || !github.event.inputs.mode) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with: { node-version: 18 }

      - name: Install dependencies
        run: npm install

      # Download artifacts from previous jobs
      - uses: actions/download-artifact@v4
        with:
          name: playwright-artifacts
          path: playwright-artifacts/
        continue-on-error: true

      - uses: actions/download-artifact@v4
        with:
          name: lint-artifacts
          path: lint-artifacts/
        continue-on-error: true

      # Generate dashboard
      - name: Generate dashboard and visual reports
        uses: ./  # Use local action
        with:
          mode: 'dashboard-only'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          playwright-artifact: 'playwright-artifacts'
          eslint-artifact: 'lint-artifacts'
          enable-pr-comments: 'true'
          enable-github-pages: 'false'  # Don't deploy directly, we'll use the proper GitHub Pages workflow
          custom-artifacts-path: 'dashboard-artifacts'

      # Upload for regular access
      - uses: actions/upload-artifact@v4
        with:
          name: gui-dashboard
          path: dashboard-artifacts/
          retention-days: 30
      
      # Upload specifically for GitHub Pages deployment
      # This follows GitHub's recommended pattern
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dashboard-artifacts/web-report/
          name: github-pages
  
  # This is the dedicated deployment job for GitHub Pages
  # This follows GitHub's recommended pattern exactly
  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    # Grant GITHUB_TOKEN the permissions required for this job
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    # Specify that we're deploying to GitHub Pages
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  # ────────────────────────────────────────────────────────────
  # This job adds the comment with the Pages URL to the PR
  comment:
    needs: deploy
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - name: Get deployment URL
        id: deployment-url
        run: echo "url=${{ needs.deploy.outputs.url }}" >> $GITHUB_OUTPUT
      
      - name: Comment on PR with dashboard link
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const url = process.env.DEPLOYMENT_URL;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🎨 GUI Test Dashboard Available
              
              The interactive dashboard has been deployed to GitHub Pages and is available at:
              
              [🔍 View Dashboard](${url})
              
              This dashboard contains:
              - Visual test execution flowcharts
              - Side-by-side comparison of PR vs main branch tests
              - Code quality metrics and analysis
              - Complete test reports with screenshots
              `
            });
        env:
          DEPLOYMENT_URL: ${{ steps.deployment-url.outputs.url }}
  
  # ────────────────────────────────────────────────────────────
  # This job runs the action in standalone mode (for workflow_dispatch)
  standalone:
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'full' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Run GUI Test Review (Standalone mode)
        uses: ./  # Use local action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: 'full'
          skip-playwright: ${{ github.event.inputs.skip-tests || 'false' }}
          skip-eslint: ${{ github.event.inputs.skip-eslint || 'false' }}
          skip-prettier: ${{ github.event.inputs.skip-prettier || 'false' }}
          use-project-eslint: 'true'
          use-project-prettier: 'true'
          enable-visual-comparison: 'true'
          enable-pr-comments: 'true'
          enable-github-pages: 'false'  # Don't use GitHub Pages in the action directly