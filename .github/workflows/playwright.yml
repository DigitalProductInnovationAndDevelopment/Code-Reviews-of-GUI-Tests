name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install NPM dependencies
        run: npm install
      
      #---------------------------------------------------
      # Setup reviewdog
      #---------------------------------------------------
      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }
      
      #---------------------------------------------------
      # Check for files with Prettier issues
      #---------------------------------------------------
      - name: Find files with Prettier issues
        id: find_prettier_issues
        shell: bash
        run: |
          # Check which files need formatting
          PRETTIER_OUTPUT=$(npx prettier --check "tests/**/*.{js,ts,tsx,json}" 2>&1 || true)
          FILES_WITH_ISSUES=$(echo "$PRETTIER_OUTPUT" | grep -oE "[^ ]+\.(js|ts|tsx|json)" | sort -u || echo "")
          
          # Save the list of files for later steps
          if [ -n "$FILES_WITH_ISSUES" ]; then
            echo "found_issues=true" >> $GITHUB_OUTPUT
            echo "files_with_issues<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES_WITH_ISSUES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Found files with Prettier issues:"
            echo "$FILES_WITH_ISSUES"
          else
            echo "found_issues=false" >> $GITHUB_OUTPUT
            echo "No Prettier issues found"
          fi
      
      #---------------------------------------------------
      # Process each file individually for better suggestions
      #---------------------------------------------------
      - name: Create Prettier suggestions
        if: steps.find_prettier_issues.outputs.found_issues == 'true'
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Process each file individually
          echo "${{ steps.find_prettier_issues.outputs.files_with_issues }}" | while read FILE; do
            echo "Processing $FILE..."
            
            # First create a formatted version to keep separately
            npx prettier "$FILE" > "${FILE}.formatted"
            
            # Create a diff with better context
            diff -u "$FILE" "${FILE}.formatted" > "${FILE}.diff" || true
            
            # Fix the diff headers for reviewdog
            sed -i "1s|--- |--- a/|" "${FILE}.diff"
            sed -i "2s|+++ |+++ b/|" "${FILE}.diff"
            
            # Send to reviewdog
            cat "${FILE}.diff" | reviewdog -f=diff \
                                         -name="prettier:$FILE" \
                                         -reporter=github-pr-review \
                                         -filter-mode=file \
                                         -level=warning
            
            # Clean up
            rm -f "${FILE}.formatted" "${FILE}.diff"
          done
      
      #---------------------------------------------------
      # ESLint with reviewdog
      #---------------------------------------------------
      - name: ESLint check with reviewdog
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run ESLint and output JSON
          npx eslint tests --ext .js,.ts,.tsx -f json > eslint-output.json || true
          
          # Check if there are any issues
          if [ -s eslint-output.json ] && [ "$(cat eslint-output.json)" != "[]" ]; then
            cat eslint-output.json | reviewdog -f=eslint \
                                              -name="eslint" \
                                              -reporter=github-pr-review \
                                              -filter-mode=file \
                                              -level=warning
          else
            echo "No ESLint issues found."
          fi
      
      #---------------------------------------------------
      # Run your original lint.js script for reports
      #---------------------------------------------------
      - name: Run lint script for reports
        run: node scripts/lint.js
        continue-on-error: true
      
      #---------------------------------------------------
      # Run your other steps
      #---------------------------------------------------
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
        continue-on-error: true
  
  deploy-report:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true