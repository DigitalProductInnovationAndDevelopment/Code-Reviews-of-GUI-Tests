name: Playwright Tests

on:
  push:
    branches: [ main, 'pbi-2.2' ] # Trigger on pushes to main and pbi-2.2
  pull_request:
    branches: [ main ] # Trigger on PRs targeting main (your pbi-2.2 PR will target main)

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important: Fetch all history to allow comparing with main

    # ---------------------------------------------------
    # 1 - Fetch baselines from main branch
    # ---------------------------------------------------
    - name: Fetch main branch for baseline comparison
      # This step only makes sense for pull requests targeting 'main'
      # or for branches that are meant to be compared against main's baselines.
      # We'll skip it if the current branch is 'main' itself.
      if: github.ref != 'refs/heads/main'
      run: |
        git fetch origin main:main-branch-for-baseline # Fetch main and store it in a temporary local branch
        # Overwrite the current branch's snapshots with main's snapshots
        git checkout main-branch-for-baseline -- tests/__snapshots__/
        echo "Baselines from 'main' branch are now in tests/__snapshots__/ for comparison."
      # Add this step only if you want to explicitly see the diff in CI output
      # - name: List baselines fetched from main (for debugging)
      #   if: github.ref != 'refs/heads/main'
      #   run: ls -R tests/__snapshots__/


    - uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Install dependencies
      run: npm ci

    # ---------------------------------------------------
    # Capture initial page screenshot (added in your previous request)
    # ---------------------------------------------------
    - name: Capture initial page screenshot
      run: npx playwright test --grep "initial-todo-page.png" # Assuming you have a specific test for this, or modify your beforeEach to run without a grep if it's always desired

    # ---------------------------------------------------
    # 5 – Run Playwright tests
    # ---------------------------------------------------
    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: 'true' # Often helpful in CI environments

    # ---------------------------------------------------
    # 6 – Upload ALL Playwright screenshots and reports
    # ---------------------------------------------------
    - name: Upload Playwright screenshots and reports
      if: always() # Always upload artifacts, even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: playwright-all-screenshots-for-review
        path: |
          test-results/ # This will contain the 'after' screenshots from the current run and diffs
          tests/**/__snapshots__/ # This will now contain the 'before' screenshots (baselines *from main* if the fetch step ran)
          playwright-report/ # Your HTML report (optional, but good to include)
        retention-days: 7 # Keep the artifacts for 7 days

    # ---------------------------------------------------
    # ... (rest of your workflow steps like ESLint, test-flow chart) ...
    # ---------------------------------------------------
    - name: Get Playwright Test Summary
      id: summary
      if: always()
      run: |
        # Parse test results to get summary metrics
        # (You'll need a script or a more robust way to get these if not already in your report)
        # For demonstration, let's assume you're parsing a JSON report
        # For simplicity, I'm just putting placeholders, adjust as needed.
        echo "total=10" >> "$GITHUB_OUTPUT"
        echo "passed=8" >> "$GITHUB_OUTPUT"
        echo "failed=2" >> "$GITHUB_OUTPUT"
        echo "skipped=0" >> "$GITHUB_OUTPUT"
        echo "duration=12345" >> "$GITHUB_OUTPUT"
        echo "passrate=80" >> "$GITHUB_OUTPUT"

    # ---------------------------------------------------
    # 11 – Sticky PR comment (Update this section)
    # ----------------------------------------------------
    - name: Comment on PR with results
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          ## Playwright Test Metrics
          *Total:* **${{ steps.summary.outputs.total }}**
          *Passed:* **${{ steps.summary.outputs.passed }}**
          *Failed:* **${{ steps.summary.outputs.failed }}**
          *Skipped:* **${{ steps.summary.outputs.skipped }}**
          *Duration:* **${{ steps.summary.outputs.duration }} ms**
          *Pass Rate:* **${{ steps.summary.outputs.passrate }} %**

          ## Screenshots for Review:
          **For visual regression comparison in this PR:**
          The tests in this workflow run were executed against the **latest baselines from the `main` branch**.

          Download the `playwright-all-screenshots-for-review` artifact from this workflow run.
          - The "Before" screenshot (baseline from `main`) is in `tests/__snapshots__/`.
          - The "After" screenshot (captured in this run from your feature branch) is in `test-results/`.
          - Any visual differences will also be shown as `*-diff.png` files in `test-results/`.

          _Full run details:_ [link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
