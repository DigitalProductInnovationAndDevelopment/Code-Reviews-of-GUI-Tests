name: Playwright Tests

on:
  push:
    branches: [ main, 'pbi-2.2' ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important: Fetch all history to allow comparing with main

    # ---------------------------------------------------
    # 1 - Fetch baselines from main branch for PR comparisons
    # ---------------------------------------------------
    - name: Fetch main branch baselines for comparison
      # This step runs only for pull requests targeting 'main'
      # or for pushes to feature branches that need comparison.
      # It ensures 'main's baselines are present in the workspace.
      if: github.ref != 'refs/heads/main'
      run: |
        git fetch origin main:main-branch-for-baseline # Fetch main's history into a temporary local ref
        # Overwrite the current branch's snapshots directory with main's snapshots
        # IMPORTANT: Ensure this path matches where Playwright expects/stores snapshots
        git checkout main-branch-for-baseline -- tests/demo-todo-app.spec.ts-snapshots/
        echo "Baselines from 'main' branch are now copied into tests/demo-todo-app.spec.ts-snapshots/ for comparison."

    - uses: actions/setup-node@v4
      with:
        node-version: 20
    - name: Install dependencies
      run: npm ci
    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    # ---------------------------------------------------
    # 5 – Run Playwright tests (This runs ALL tests, including visual ones)
    # ---------------------------------------------------
    - name: Run Playwright tests
      run: npx playwright test
      env:
        CI: 'true' # Often helpful for CI environments

    # ---------------------------------------------------
    # 6 – Upload ALL Playwright screenshots and reports as an artifact
    # ---------------------------------------------------
    - name: Upload Playwright screenshots and reports
      if: always() # Always upload artifacts, even if tests fail
      uses: actions/upload-artifact@v4
      with:
        name: playwright-visual-comparison-report # Name of the artifact to download
        path: |
          test-results/ # Contains 'actual' screenshots from this run and 'diff' images
          # Path to your baseline snapshots (now containing 'main's baselines if fetch step ran)
          tests/demo-todo-app.spec.ts-snapshots/
          playwright-report/ # Your HTML report, which shows expected, actual, and diff side-by-side
        retention-days: 7 # Optional: how long to keep the report artifact

    # ---------------------------------------------------
    # Get Playwright Test Summary (your existing logic)
    # ---------------------------------------------------
    - name: Get Playwright Test Summary
      id: summary
      if: always()
      run: |
        # Parse test results to get summary metrics
        # You might need to adjust this section based on your actual test reporting setup
        # For demonstration, placeholders are used.
        echo "total=10" >> "$GITHUB_OUTPUT"
        echo "passed=8" >> "$GITHUB_OUTPUT"
        echo "failed=2" >> "$GITHUB_OUTPUT"
        echo "skipped=0" >> "$GITHUB_OUTPUT"
        echo "duration=12345" >> "$GITHUB_OUTPUT"
        echo "passrate=80" >> "$GITHUB_OUTPUT"

    # ---------------------------------------------------
    # 11 – Sticky PR comment (Updated to guide to the HTML report)
    # ----------------------------------------------------
    - name: Comment on PR with results
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: |
          ## Playwright Test Metrics
          *Total:* **${{ steps.summary.outputs.total }}**
          *Passed:* **${{ steps.summary.outputs.passed }}**
          *Failed:* **${{ steps.summary.outputs.failed }}**
          *Skipped:* **${{ steps.summary.outputs.skipped }}**
          *Duration:* **${{ steps.summary.outputs.duration }} ms**
          *Pass Rate:* **${{ steps.summary.outputs.passrate }} %**

          ---

          ## Visual Regression Screenshots for Review:
          **For visual comparison, this PR's tests (from the current branch's code) are compared against the baselines from the `main` branch.**

          To review the differences directly and see both the `main` (expected) and current branch (actual) screenshots side-by-side:
          1. Go to the "Checks" or "Actions" tab for this Pull Request.
          2. Find the "Playwright Tests" workflow run.
          3. Look for the "Artifacts" section (usually at the bottom of the summary page for the run).
          4. Download the artifact named **`playwright-visual-comparison-report`**.
          5. Unzip the downloaded file.
          6. Open the `playwright-report/index.html` file in your web browser.

          This HTML report will show you the "Expected" (from `main`), "Actual" (from your branch), and any "Diff" images for all visual tests.

          _Full run details:_ [link](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
