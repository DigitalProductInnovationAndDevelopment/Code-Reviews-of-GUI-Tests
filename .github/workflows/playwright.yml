name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install dependencies
        run: npm install
      
      # Run prettier and eslint checks for the comment
      - name: Run Prettier check
        id: prettier
        run: |
          # Run prettier check and capture output
          PRETTIER_OUTPUT=$(npx prettier --check "tests/**/*.{js,ts,tsx,json}" 2>&1 || true)
          
          # Extract list of files with issues
          FILES=$(echo "$PRETTIER_OUTPUT" | grep -oE "[^ ]+\.(js|ts|tsx|json)" | sort -u || echo "")
          
          # Count files with issues
          if [ -n "$FILES" ]; then
            FILE_COUNT=$(echo "$FILES" | wc -l)
            echo "prettier_files=$FILE_COUNT" >> $GITHUB_OUTPUT
            echo "prettier_file_list<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Count total Prettier issues in each file
            TOTAL_ISSUES=0
            for FILE in $FILES; do
              # Format the file and compare with original to count differences
              FORMATTED=$(npx prettier "$FILE" 2>/dev/null)
              ORIGINAL=$(cat "$FILE")
              
              # Count lines that differ
              ORIG_COUNT=$(echo "$ORIGINAL" | wc -l)
              FORMATTED_COUNT=$(echo "$FORMATTED" | wc -l)
              
              # This is an approximation - count both added and removed lines
              CHANGES=$((ORIG_COUNT + FORMATTED_COUNT))
              TOTAL_ISSUES=$((TOTAL_ISSUES + CHANGES))
            done
            
            echo "prettier_issues=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            echo "Found $FILE_COUNT files with approximately $TOTAL_ISSUES Prettier issues"
            
            # Create prettier-report.json for the dashboard
            mkdir -p artifacts
            echo "{\"files\": $FILE_COUNT, \"issues\": $TOTAL_ISSUES}" > artifacts/prettier-report.json
          else
            echo "prettier_files=0" >> $GITHUB_OUTPUT
            echo "prettier_issues=0" >> $GITHUB_OUTPUT
            echo "No Prettier issues found"
            
            # Create empty prettier-report.json
            mkdir -p artifacts
            echo "{\"files\": 0, \"issues\": 0}" > artifacts/prettier-report.json
          fi
        continue-on-error: true
      
      - name: Run ESLint check
        id: eslint
        run: |
          # Run ESLint and capture output
          ESLINT_OUTPUT=$(npx eslint tests --ext .js,.ts,.tsx -f json || true)
          
          # Save for analysis
          mkdir -p artifacts
          echo "$ESLINT_OUTPUT" > artifacts/eslint-output.json
          
          # Count issues if we have valid JSON
          if echo "$ESLINT_OUTPUT" | jq empty 2>/dev/null; then
            TOTAL_ISSUES=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | length] | add')
            ERROR_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | .[] | select(.severity == 2)] | length')
            WARNING_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | .[] | select(.severity == 1)] | length')
            
            echo "eslint_errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "eslint_warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "eslint_total=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            
            echo "Found $TOTAL_ISSUES ESLint issues ($ERROR_COUNT errors, $WARNING_COUNT warnings)"
            
            # Create eslint-report.json for the dashboard
            echo "{\"total\": $TOTAL_ISSUES, \"errors\": $ERROR_COUNT, \"warnings\": $WARNING_COUNT}" > artifacts/eslint-report.json
          else
            echo "eslint_errors=0" >> $GITHUB_OUTPUT
            echo "eslint_warnings=0" >> $GITHUB_OUTPUT
            echo "eslint_total=0" >> $GITHUB_OUTPUT
            echo "No ESLint issues found or invalid output"
            
            # Create empty eslint-report.json
            echo "{\"total\": 0, \"errors\": 0, \"warnings\": 0}" > artifacts/eslint-report.json
          fi
        continue-on-error: true
      
      # Create a custom lint-summary.json that includes the correct counts
      - name: Create correct lint-summary.json
        run: |
          mkdir -p artifacts
          cat > artifacts/lint-summary.json << EOF
          {
            "prettier": {
              "filesWithIssues": ${{ steps.prettier.outputs.prettier_files || 0 }},
              "totalChanges": ${{ steps.prettier.outputs.prettier_issues || 0 }},
              "files": [
                ${{ steps.prettier.outputs.prettier_files != '0' && format('"{0}"', steps.prettier.outputs.prettier_file_list) || '' }}
              ]
            },
            "eslint": {
              "files": ${{ steps.eslint.outputs.eslint_total != '0' && 1 || 0 }},
              "errors": ${{ steps.eslint.outputs.eslint_errors || 0 }},
              "warnings": ${{ steps.eslint.outputs.eslint_warnings || 0 }},
              "fixableErrors": 0,
              "fixableWarnings": 0
            }
          }
          EOF
          
          echo "Created correct lint-summary.json with proper counts"
          cat artifacts/lint-summary.json
        continue-on-error: true
      
      # Use a direct prettier action for inline annotations
      - name: Prettier Annotations
        uses: creyD/prettier_action@v4.3
        with:
          prettier_options: "--check tests/**/*.{js,ts,tsx,json}"
          only_changed: true
          commit_options: ""  # Don't commit
          github_token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      
      # Use ESLint action for ESLint annotations - with correct parameter names
      - name: ESLint Annotations
        uses: sibiraj-s/action-eslint@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          eslint-args: '--ext .js,.ts,.tsx tests'
          annotations: true
          ignore-path: .eslintignore
        continue-on-error: true
      
      # Run your tests and other steps
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      # Create a PR comment with the results of both checks and detailed list with hide/show
      - name: Create PR comment
        uses: peter-evans/create-or-update-comment@v3
        if: github.event_name == 'pull_request'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üîç Code Quality Check Results
            
            ### Prettier
            
            ${{ steps.prettier.outputs.prettier_files == '0' && '‚úÖ No formatting issues found' || format('‚ùå Found **{0} files** with approximately **{1} formatting issues**. GitHub shows only a limited number as inline comments.', steps.prettier.outputs.prettier_files, steps.prettier.outputs.prettier_issues) }}
            
            <details>
            <summary>Click to see all files with Prettier issues</summary>
            
            ```
            ${{ steps.prettier.outputs.prettier_file_list }}
            ```
            
            Each file has multiple formatting issues. The most common issues are:
            - Single quotes vs double quotes
            - Trailing commas
            - Indentation
            - Line breaks
            - Spacing around operators
            
            </details>
            
            ### ESLint
            
            ${{ steps.eslint.outputs.eslint_total == '0' && '‚úÖ No linting issues found' || format('‚ùå Found **{0} issues** ({1} errors, {2} warnings). GitHub shows only a limited number as inline comments.', steps.eslint.outputs.eslint_total, steps.eslint.outputs.eslint_errors, steps.eslint.outputs.eslint_warnings) }}
            
            ### How to fix all issues
            
            ```bash
            # Fix Prettier issues:
            npx prettier --write "tests/**/*.{js,ts,tsx,json}"
            
            # Fix ESLint issues:
            npx eslint --fix tests --ext .js,.ts,.tsx
            ```
            
            Please fix these issues before merging! You can run these commands locally to apply all the fixes automatically.
          edit-mode: replace
        continue-on-error: true
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
        continue-on-error: true
  
  deploy-report:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true