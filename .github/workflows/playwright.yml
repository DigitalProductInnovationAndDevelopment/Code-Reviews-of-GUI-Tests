name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install dependencies
        run: npm install
      
      # Run prettier and eslint checks for the comment
      - name: Run Prettier check
        id: prettier
        run: |
          # Run prettier check and capture output
          PRETTIER_OUTPUT=$(npx prettier --check "tests/**/*.{js,ts,tsx,json}" 2>&1 || true)
          
          # Extract list of files with issues
          FILES=$(echo "$PRETTIER_OUTPUT" | grep -oE "[^ ]+\.(js|ts|tsx|json)" | sort -u || echo "")
          
          # Count files with issues
          if [ -n "$FILES" ]; then
            FILE_COUNT=$(echo "$FILES" | wc -l)
            echo "prettier_files=$FILE_COUNT" >> $GITHUB_OUTPUT
            echo "prettier_file_list<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "Found $FILE_COUNT files with Prettier issues"
          else
            echo "prettier_files=0" >> $GITHUB_OUTPUT
            echo "No Prettier issues found"
          fi
        continue-on-error: true
      
      - name: Run ESLint check
        id: eslint
        run: |
          # Run ESLint and capture output
          ESLINT_OUTPUT=$(npx eslint tests --ext .js,.ts,.tsx -f json || true)
          
          # Save for analysis
          mkdir -p artifacts
          echo "$ESLINT_OUTPUT" > artifacts/eslint-output.json
          
          # Count issues if we have valid JSON
          if echo "$ESLINT_OUTPUT" | jq empty 2>/dev/null; then
            TOTAL_ISSUES=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | length] | add')
            ERROR_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | .[] | select(.severity == 2)] | length')
            WARNING_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[].messages | .[] | select(.severity == 1)] | length')
            
            echo "eslint_errors=$ERROR_COUNT" >> $GITHUB_OUTPUT
            echo "eslint_warnings=$WARNING_COUNT" >> $GITHUB_OUTPUT
            echo "eslint_total=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            
            echo "Found $TOTAL_ISSUES ESLint issues ($ERROR_COUNT errors, $WARNING_COUNT warnings)"
          else
            echo "eslint_errors=0" >> $GITHUB_OUTPUT
            echo "eslint_warnings=0" >> $GITHUB_OUTPUT
            echo "eslint_total=0" >> $GITHUB_OUTPUT
            echo "No ESLint issues found or invalid output"
          fi
        continue-on-error: true
      
      # Setup reviewdog for inline comments
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      
      # Create limited inline annotations for Prettier using reviewdog
      - name: Limited Prettier inline comments
        if: github.event_name == 'pull_request' && steps.prettier.outputs.prettier_files != '0'
        run: |
          # Create dirs for temp files
          mkdir -p temp_files
          
          # Get the first file from the list
          FIRST_FILE=$(echo "${{ steps.prettier.outputs.prettier_file_list }}" | head -n 1)
          echo "Creating inline comments for: $FIRST_FILE"
          
          # Generate formatted version
          FORMATTED=$(npx prettier "$FIRST_FILE")
          TEMP_FILE="temp_files/prettier_temp.formatted"
          echo "$FORMATTED" > "$TEMP_FILE"
          
          # Generate diff
          DIFF=$(diff -u "$FIRST_FILE" "$TEMP_FILE" || true)
          
          # Add proper git diff headers
          DIFF=$(echo "$DIFF" | sed "1s|---|--- a/$FIRST_FILE|" | sed "2s|+++|+++ b/$FIRST_FILE|")
          
          # Extract only first 8 hunks from the diff to stay well under GitHub limits
          DIFF_LIMITED=$(echo "$DIFF" | awk 'BEGIN{i=0} /^@@/{i++} i<=9' | head -n 200)
          echo "$DIFF_LIMITED" > temp_files/prettier_diff_limited.patch
          
          # Run reviewdog with the limited diff
          echo "$DIFF_LIMITED" | REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} reviewdog -f=diff -name=prettier -reporter=github-pr-review -filter-mode=nofilter -level=warning -fail-on-error=false
        continue-on-error: true
      
      # Create limited inline annotations for ESLint
      - name: Limited ESLint inline comments
        if: github.event_name == 'pull_request' && steps.eslint.outputs.eslint_total != '0'
        run: |
          # Create dirs for temp files
          mkdir -p temp_files/eslint_results
          
          # Extract the ESLint output from the previous step
          cat artifacts/eslint-output.json > temp_files/eslint_results/all_issues.json
          
          # Extract a limited set of issues (5 errors and 5 warnings max)
          jq '[.[].messages | .[] | select(.severity == 2)] | .[0:5]' temp_files/eslint_results/all_issues.json > temp_files/eslint_results/errors.json
          jq '[.[].messages | .[] | select(.severity == 1)] | .[0:5]' temp_files/eslint_results/all_issues.json > temp_files/eslint_results/warnings.json
          
          # Create a file with the limited issues for reviewdog
          jq -s '[ .[] | { filePath: "tests/demo-todo-app.spec.ts", messages: . } ]' temp_files/eslint_results/errors.json temp_files/eslint_results/warnings.json > temp_files/eslint_results/limited.json
          
          # Run reviewdog with the limited ESLint output
          cat temp_files/eslint_results/limited.json | REVIEWDOG_GITHUB_API_TOKEN=${{ secrets.GITHUB_TOKEN }} reviewdog -f=eslint -name=eslint -reporter=github-pr-review -filter-mode=nofilter -level=warning -fail-on-error=false
        continue-on-error: true
      
      # Run your original scripts for reporting
      - name: Run existing lint script for reporting
        run: |
          # Create a simplified lint script
          cat > scripts/lint-for-report.js << 'EOF'
          #!/usr/bin/env node
          const { execSync } = require('child_process');
          const fs = require('fs');

          function runPrettier() {
            console.log('\n‚ñ∂ Prettier check');
            let filesToFormat = [];
            try {
              execSync('npx prettier --check "tests/**/*.{js,ts,tsx,json}"', { stdio: 'inherit' });
            } catch (error) {
              const output = error.stdout?.toString() || '';
              const matches = output.match(/[^\s]+\.(js|ts|tsx|json)/g);
              if (matches) {
                filesToFormat = matches.filter(file => file.startsWith('tests/'));
              }
            }
            
            return {
              filesWithIssues: filesToFormat.length,
              files: filesToFormat
            };
          }

          function runESLint() {
            console.log('\n‚ñ∂ ESLint');
            let raw = '';
            try {
              raw = execSync('npx eslint tests --ext .js,.ts,.tsx -f json', { encoding: 'utf8' });
            } catch (e) {
              raw = e.stdout?.toString() || '';
            }
            
            const results = raw ? JSON.parse(raw) : [];
            let errors = 0, warnings = 0, fixErr = 0, fixWarn = 0, first = '', files = new Set();

            results.forEach(f => {
              if (f.messages.length) files.add(f.filePath);
              f.messages.forEach(m => {
                if (m.severity === 2) {
                  errors++;
                  if (m.fix) fixErr++;
                  if (!first) first = `${m.ruleId || 'unknown-rule'} in ${f.filePath}:${m.line}`;
                } else if (m.severity === 1) {
                  warnings++;
                  if (m.fix) fixWarn++;
                }
              });
            });

            return {
              files: files.size,
              errors,
              warnings,
              fixableErrors: fixErr,
              fixableWarnings: fixWarn,
              first
            };
          }

          const prettier = runPrettier();
          const eslint = runESLint();

          fs.mkdirSync('artifacts', { recursive: true });
          fs.writeFileSync('artifacts/lint-summary.json', JSON.stringify({ prettier, eslint }, null, 2));
          console.log('üìù artifacts/lint-summary.json written');
          EOF
          
          chmod +x scripts/lint-for-report.js
          node scripts/lint-for-report.js
        continue-on-error: true
      
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      # Create a PR comment with the results of both checks and detailed list with hide/show
      - name: Create PR comment
        uses: peter-evans/create-or-update-comment@v3
        if: github.event_name == 'pull_request'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## üîç Code Quality Check Results
            
            ### Prettier
            
            ${{ steps.prettier.outputs.prettier_files == '0' && '‚úÖ No formatting issues found' || format('‚ùå Found **{0} files** with formatting issues. Showing first 8 issues as inline comments, rest are summarized here.', steps.prettier.outputs.prettier_files) }}
            
            <details>
            <summary>Click to see all files with Prettier issues</summary>
            
            ```
            ${{ steps.prettier.outputs.prettier_file_list }}
            ```
            </details>
            
            ### ESLint
            
            ${{ steps.eslint.outputs.eslint_total == '0' && '‚úÖ No linting issues found' || format('‚ùå Found **{0} issues** ({1} errors, {2} warnings). Showing first 10 issues as inline comments, rest are summarized here.', steps.eslint.outputs.eslint_total, steps.eslint.outputs.eslint_errors, steps.eslint.outputs.eslint_warnings) }}
            
            ### How to fix all issues
            
            ```bash
            # Fix Prettier issues:
            npx prettier --write "tests/**/*.{js,ts,tsx,json}"
            
            # Fix ESLint issues:
            npx eslint --fix tests --ext .js,.ts,.tsx
            ```
            
            Please fix these issues before merging! You can run these commands locally to apply all the fixes automatically.
          edit-mode: replace
        continue-on-error: true
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
        continue-on-error: true
  
  deploy-report:
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true