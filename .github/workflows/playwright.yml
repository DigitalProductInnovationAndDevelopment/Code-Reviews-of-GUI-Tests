name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      - name: Install NPM dependencies
        run: npm install
      
      #---------------------------------------------------
      # Setup reviewdog
      #---------------------------------------------------
      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }
      
      #---------------------------------------------------
      # Check for files with Prettier issues
      #---------------------------------------------------
      - name: Find files with Prettier issues
        id: find_prettier_issues
        shell: bash
        run: |
          # Check which files need formatting
          PRETTIER_OUTPUT=$(npx prettier --check "tests/**/*.{js,ts,tsx,json}" 2>&1 || true)
          FILES_WITH_ISSUES=$(echo "$PRETTIER_OUTPUT" | grep -oE "[^ ]+\.(js|ts|tsx|json)" | sort -u || echo "")
          
          # Save the list of files for later steps
          if [ -n "$FILES_WITH_ISSUES" ]; then
            echo "found_issues=true" >> $GITHUB_OUTPUT
            echo "files_with_issues<<EOF" >> $GITHUB_OUTPUT
            echo "$FILES_WITH_ISSUES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            # Count the number of files
            FILE_COUNT=$(echo "$FILES_WITH_ISSUES" | wc -l)
            echo "prettier_file_count=$FILE_COUNT" >> $GITHUB_OUTPUT
            
            # Count the total number of issues
            mkdir -p temp_prettier
            TOTAL_ISSUES=0
            
            for FILE in $FILES_WITH_ISSUES; do
              echo "Counting issues in $FILE..."
              # Create a formatted version to compare
              npx prettier "$FILE" > "temp_prettier/$(basename "$FILE").formatted"
              # Count changes (each line added or removed is an issue)
              CHANGES=$(diff -u "$FILE" "temp_prettier/$(basename "$FILE").formatted" | grep -E "^[+-][^+-]" | wc -l)
              TOTAL_ISSUES=$((TOTAL_ISSUES + CHANGES))
            done
            
            echo "prettier_issue_count=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            echo "Found $FILE_COUNT files with $TOTAL_ISSUES Prettier issues"
            
            # Create a formatted file to use in the PR comment
            for FILE in $FILES_WITH_ISSUES; do
              SAMPLE_FILE=$FILE
              break
            done
            
            # Format the sample file and create a diff
            npx prettier "$SAMPLE_FILE" > "temp_prettier/sample.formatted"
            diff -u "$SAMPLE_FILE" "temp_prettier/sample.formatted" > "temp_prettier/sample.diff" || true
            
            # Extract the first 8 changes for the sample
            SAMPLE_DIFF=$(cat "temp_prettier/sample.diff" | grep -E "^[+-][^+-]" | head -n 8)
            echo "prettier_sample<<EOF" >> $GITHUB_OUTPUT
            echo "$SAMPLE_DIFF" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "found_issues=false" >> $GITHUB_OUTPUT
            echo "prettier_file_count=0" >> $GITHUB_OUTPUT
            echo "prettier_issue_count=0" >> $GITHUB_OUTPUT
            echo "No Prettier issues found"
          fi
      
      #---------------------------------------------------
      # Create limited Prettier suggestions for reviewdog
      #---------------------------------------------------
      - name: Create limited Prettier suggestions
        if: steps.find_prettier_issues.outputs.found_issues == 'true'
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # We'll only process the first file to stay within GitHub limits
          FIRST_FILE=$(echo "${{ steps.find_prettier_issues.outputs.files_with_issues }}" | head -n 1)
          echo "Creating suggestions for $FIRST_FILE (limited to 8 suggestions)..."
          
          # Format the file
          npx prettier --write "$FIRST_FILE"
          
          # Create a diff and send to reviewdog
          git diff -U0 --no-color "$FIRST_FILE" > prettier.patch || true
          
          # If we have changes, send them to reviewdog
          if [ -s prettier.patch ]; then
            # Use head to limit the number of annotations
            cat prettier.patch | reviewdog -f=diff \
                                        -name="prettier" \
                                        -reporter=github-pr-review \
                                        -filter-mode=diff_context \
                                        -level=warning
          fi
          
          # Reset changes
          git checkout -- .
      
      #---------------------------------------------------
      # ESLint with reviewdog (limited)
      #---------------------------------------------------
      - name: ESLint check with reviewdog
        id: eslint_check
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run ESLint and output JSON
          npx eslint tests --ext .js,.ts,.tsx -f json > eslint-output.json || true
          
          # Check if there are any issues
          if [ -s eslint-output.json ] && [ "$(cat eslint-output.json)" != "[]" ]; then
            # Count total issues
            TOTAL_ERRORS=$(jq '[.[].messages | .[] | select(.severity == 2)] | length' eslint-output.json)
            TOTAL_WARNINGS=$(jq '[.[].messages | .[] | select(.severity == 1)] | length' eslint-output.json)
            TOTAL_ISSUES=$((TOTAL_ERRORS + TOTAL_WARNINGS))
            TOTAL_FILES=$(jq '[.[].filePath] | unique | length' eslint-output.json)
            
            echo "eslint_error_count=$TOTAL_ERRORS" >> $GITHUB_OUTPUT
            echo "eslint_warning_count=$TOTAL_WARNINGS" >> $GITHUB_OUTPUT
            echo "eslint_issue_count=$TOTAL_ISSUES" >> $GITHUB_OUTPUT
            echo "eslint_file_count=$TOTAL_FILES" >> $GITHUB_OUTPUT
            
            echo "Found $TOTAL_ISSUES ESLint issues ($TOTAL_ERRORS errors, $TOTAL_WARNINGS warnings) in $TOTAL_FILES files"
            
            # Extract a limited set of issues for display (8 max)
            LIMITED_OUTPUT=$(jq '[.[]][0:1] | map({filePath, messages: .messages[0:8]})' eslint-output.json)
            echo "$LIMITED_OUTPUT" > eslint-limited.json
            
            # Send limited output to reviewdog
            cat eslint-limited.json | reviewdog -f=eslint \
                                              -name="eslint" \
                                              -reporter=github-pr-review \
                                              -filter-mode=nofilter \
                                              -level=warning
            
            # Extract sample issues for the PR comment
            SAMPLE_ISSUES=$(jq '[.[].messages[] | {ruleId, message}][0:5]' eslint-output.json)
            echo "eslint_sample<<EOF" >> $GITHUB_OUTPUT
            echo "$SAMPLE_ISSUES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "eslint_error_count=0" >> $GITHUB_OUTPUT
            echo "eslint_warning_count=0" >> $GITHUB_OUTPUT
            echo "eslint_issue_count=0" >> $GITHUB_OUTPUT
            echo "eslint_file_count=0" >> $GITHUB_OUTPUT
            echo "No ESLint issues found."
          fi
      
      #---------------------------------------------------
      # Generate a fix-all script for quick fixes
      #---------------------------------------------------
      - name: Generate fix-all script
        if: steps.find_prettier_issues.outputs.found_issues == 'true' || steps.eslint_check.outputs.eslint_issue_count != '0'
        run: |
          mkdir -p artifacts
          cat > artifacts/fix-all.sh << 'EOF'
          #!/bin/bash
          
          # Fix Prettier issues
          echo "Fixing Prettier issues..."
          npx prettier --write "tests/**/*.{js,ts,tsx,json}"
          
          # Fix ESLint issues
          echo "Fixing ESLint issues..."
          npx eslint --fix tests --ext .js,.ts,.tsx
          
          echo "All fixable issues have been addressed!"
          EOF
          
          chmod +x artifacts/fix-all.sh
          echo "Created fix-all.sh script in artifacts directory"
      
      #---------------------------------------------------
      # Run your original lint.js script for reports
      #---------------------------------------------------
      - name: Run lint script for reports
        run: node scripts/lint.js
        continue-on-error: true
      
      #---------------------------------------------------
      # Run your other steps
      #---------------------------------------------------
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      #---------------------------------------------------
      # Create PR comment with summary and quick fix option
      #---------------------------------------------------
      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🔍 Code Quality Check Results
            
            ### Prettier
            
            ${{ steps.find_prettier_issues.outputs.prettier_file_count == '0' && '✅ No formatting issues found' || format('❌ Found **{0} files** with **{1} formatting issues**.', steps.find_prettier_issues.outputs.prettier_file_count, steps.find_prettier_issues.outputs.prettier_issue_count) }}
            
            ${{ steps.find_prettier_issues.outputs.prettier_file_count != '0' && 'Some suggestions are shown as inline comments in the "Files changed" tab. Due to GitHub limitations, only 8 suggestions are shown.' || '' }}
            
            ${{ steps.find_prettier_issues.outputs.prettier_file_count != '0' && format('<details><summary>Sample of Prettier issues</summary>

            ```diff
            {0}
            ```

            </details>', steps.find_prettier_issues.outputs.prettier_sample) || '' }}
            
            ### ESLint
            
            ${{ steps.eslint_check.outputs.eslint_issue_count == '0' && '✅ No linting issues found' || format('❌ Found **{0} issues** ({1} errors, {2} warnings) in {3} files.', steps.eslint_check.outputs.eslint_issue_count, steps.eslint_check.outputs.eslint_error_count, steps.eslint_check.outputs.eslint_warning_count, steps.eslint_check.outputs.eslint_file_count) }}
            
            ${{ steps.eslint_check.outputs.eslint_issue_count != '0' && 'Some suggestions are shown as inline comments in the "Files changed" tab. Due to GitHub limitations, only 8 suggestions are shown.' || '' }}
            
            ${{ steps.eslint_check.outputs.eslint_issue_count != '0' && format('<details><summary>Sample of ESLint issues</summary>

            ```json
            {0}
            ```

            </details>', steps.eslint_check.outputs.eslint_sample) || '' }}
            
            ### How to fix all issues
            
            ```bash
            # Fix Prettier issues:
            npx prettier --write "tests/**/*.{js,ts,tsx,json}"
            
            # Fix ESLint issues:
            npx eslint --fix tests --ext .js,.ts,.tsx
            ```
            
            A `fix-all.sh` script has been generated in the artifacts that combines these commands for convenience.
            
            Please fix these issues before merging!
          edit-mode: replace
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
        continue-on-error: true
  
  deploy-report:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true