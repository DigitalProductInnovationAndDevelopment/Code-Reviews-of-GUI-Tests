name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      
      #---------------------------------------------------
      # Setup reviewdog
      #---------------------------------------------------
      - uses: reviewdog/action-setup@v1
        with: { reviewdog_version: latest }
      
      #---------------------------------------------------
      # Prettier with reviewdog for inline comments
      #---------------------------------------------------
      - name: Prettier check with reviewdog
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npx prettier --write "tests/**/*.{js,ts,tsx,json}"
          git diff -U0 --no-color > prettier.patch || true
          if [ -s prettier.patch ]; then
            cat prettier.patch | reviewdog -f=diff \
                                         -name="prettier" \
                                         -reporter=github-pr-review \
                                         -filter-mode=diff_context \
                                         -level=warning
          else
            echo "No Prettier issues found."
          fi
      
      - name: Install NPM dependencies
        run: npm install
      
      #---------------------------------------------------
      # ESLint with reviewdog for inline comments
      #---------------------------------------------------
      - name: ESLint check with reviewdog
        shell: bash
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Run ESLint and output JSON
          npx eslint tests --ext .js,.ts,.tsx -f json > eslint-output.json || true
          
          # Check if there are any issues
          if [ -s eslint-output.json ] && [ "$(cat eslint-output.json)" != "[]" ]; then
            cat eslint-output.json | reviewdog -f=eslint \
                                              -name="eslint" \
                                              -reporter=github-pr-review \
                                              -filter-mode=nofilter \
                                              -level=warning
          else
            echo "No ESLint issues found."
          fi
      
      #---------------------------------------------------
      # Generate accurate counts for the dashboard
      #---------------------------------------------------
      - name: Generate accurate counts
        id: count-issues
        run: |
          # Count Prettier issues
          if [ -s prettier.patch ]; then
            # Count only the actual changed lines (not context/metadata)
            PRETTIER_CHANGES=$(cat prettier.patch | grep -E "^[+-][^+-]" | wc -l)
            PRETTIER_FILES=$(git diff --name-only | grep -E "\.(js|ts|tsx|json)$" | wc -l)
            echo "prettier_issues=$PRETTIER_CHANGES" >> $GITHUB_OUTPUT
            echo "prettier_files=$PRETTIER_FILES" >> $GITHUB_OUTPUT
            echo "Found $PRETTIER_FILES files with $PRETTIER_CHANGES Prettier issues"
          else
            echo "prettier_issues=0" >> $GITHUB_OUTPUT
            echo "prettier_files=0" >> $GITHUB_OUTPUT
            echo "No Prettier issues found"
          fi
          
          # Count ESLint issues
          if [ -s eslint-output.json ] && [ "$(cat eslint-output.json)" != "[]" ]; then
            ESLINT_ERRORS=$(jq '[.[].messages | .[] | select(.severity == 2)] | length' eslint-output.json)
            ESLINT_WARNINGS=$(jq '[.[].messages | .[] | select(.severity == 1)] | length' eslint-output.json)
            ESLINT_TOTAL=$((ESLINT_ERRORS + ESLINT_WARNINGS))
            ESLINT_FILES=$(jq '[.[].filePath] | unique | length' eslint-output.json)
            
            echo "eslint_errors=$ESLINT_ERRORS" >> $GITHUB_OUTPUT
            echo "eslint_warnings=$ESLINT_WARNINGS" >> $GITHUB_OUTPUT
            echo "eslint_total=$ESLINT_TOTAL" >> $GITHUB_OUTPUT
            echo "eslint_files=$ESLINT_FILES" >> $GITHUB_OUTPUT
            
            echo "Found $ESLINT_TOTAL ESLint issues ($ESLINT_ERRORS errors, $ESLINT_WARNINGS warnings) in $ESLINT_FILES files"
          else
            echo "eslint_errors=0" >> $GITHUB_OUTPUT
            echo "eslint_warnings=0" >> $GITHUB_OUTPUT
            echo "eslint_total=0" >> $GITHUB_OUTPUT
            echo "eslint_files=0" >> $GITHUB_OUTPUT
            echo "No ESLint issues found"
          fi
      
      #---------------------------------------------------
      # Create lint-summary.json for the dashboard
      #---------------------------------------------------
      - name: Create lint-summary.json
        run: |
          mkdir -p artifacts
          cat > artifacts/lint-summary.json << EOF
          {
            "prettier": {
              "filesWithIssues": ${{ steps.count-issues.outputs.prettier_files || 0 }},
              "totalChanges": ${{ steps.count-issues.outputs.prettier_issues || 0 }},
              "files": []
            },
            "eslint": {
              "files": ${{ steps.count-issues.outputs.eslint_files || 0 }},
              "errors": ${{ steps.count-issues.outputs.eslint_errors || 0 }},
              "warnings": ${{ steps.count-issues.outputs.eslint_warnings || 0 }},
              "fixableErrors": 0,
              "fixableWarnings": 0
            }
          }
          EOF
          
          echo "Created lint-summary.json with proper counts"
          cat artifacts/lint-summary.json
      
      #---------------------------------------------------
      # Run your other tests and steps
      #---------------------------------------------------
      - name: Playwright tests
        run: node scripts/playwright-test.js
        continue-on-error: true
      
      - name: Generate flow-chart
        run: node scripts/generate-flowchart.js
        continue-on-error: true
      
      - name: Build checklist
        run: node scripts/checklist.js
        continue-on-error: true
      
      - name: Build static HTML report
        run: node scripts/generate-webpage.js
        continue-on-error: true
      
      - name: Create test-summary badge
        run: |
          if [ -f "artifacts/playwright-summary.json" ]; then
            jq -r '"Total: \(.total) | Passed: \(.passed) | Failed: \(.failed) | Skipped: \(.skipped)"' \
              artifacts/playwright-summary.json > artifacts/test-summary.txt
          else
            echo "No playwright-summary.json file found. Creating empty summary."
            echo "Total: 0 | Passed: 0 | Failed: 0 | Skipped: 0" > artifacts/test-summary.txt
          fi
        continue-on-error: true
      
      #---------------------------------------------------
      # Create PR comment with summary
      #---------------------------------------------------
      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## 🔍 Code Quality Check Results
            
            ### Prettier
            
            ${{ steps.count-issues.outputs.prettier_files == '0' && '✅ No formatting issues found' || format('❌ Found **{0} files** with **{1} formatting issues**.', steps.count-issues.outputs.prettier_files, steps.count-issues.outputs.prettier_issues) }}
            
            ${{ steps.count-issues.outputs.prettier_files != '0' && 'Check the "Files changed" tab to see inline suggestions for formatting issues.' || '' }}
            
            ### ESLint
            
            ${{ steps.count-issues.outputs.eslint_total == '0' && '✅ No linting issues found' || format('❌ Found **{0} issues** ({1} errors, {2} warnings).', steps.count-issues.outputs.eslint_total, steps.count-issues.outputs.eslint_errors, steps.count-issues.outputs.eslint_warnings) }}
            
            ${{ steps.count-issues.outputs.eslint_total != '0' && 'Check the "Files changed" tab to see inline suggestions for ESLint issues.' || '' }}
            
            ### How to fix all issues locally
            
            ```bash
            # Fix Prettier issues:
            npx prettier --write "tests/**/*.{js,ts,tsx,json}"
            
            # Fix ESLint issues:
            npx eslint --fix tests --ext .js,.ts,.tsx
            ```
            
            Please fix these issues before merging!
          edit-mode: replace
      
      - uses: actions/upload-artifact@v4
        with:
          name: gui-artifacts
          path: artifacts/*
  
  deploy-report:
    needs: build-test
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}
    
    steps:
      - uses: actions/download-artifact@v4
        with: { name: gui-artifacts, path: gui-artifacts }
        continue-on-error: true
      
      - uses: actions/upload-pages-artifact@v3
        with: { path: gui-artifacts/web-report }
        continue-on-error: true
      
      - id: deploy
        uses: actions/deploy-pages@v4
        continue-on-error: true
  
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        continue-on-error: true
      
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
        continue-on-error: true
      
      - name: Install JS dependencies (Octokit, marked, etc.)
        run: npm install
        continue-on-error: true
      
      - uses: actions/download-artifact@v4
        with:
          name: gui-artifacts
          path: gui-artifacts
        continue-on-error: true
      
      - name: Post / update GUI-test summary comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARTIFACTS_DIR: gui-artifacts
          WEB_REPORT_URL: https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html
        run: node scripts/summary-comment.js
        continue-on-error: true