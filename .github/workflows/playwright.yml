name: GUI Test Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
####################################################################
# 1) Build, lint, test and create artefacts                        #
####################################################################
  review-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    # â”€â”€ checkout & Node â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: actions/checkout@v4
      with: { fetch-depth: 0 }

    - uses: actions/setup-node@v4
      with: { node-version: 18 }

    # â”€â”€ reviewdog binary â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: reviewdog/action-setup@v1
      with: { reviewdog_version: latest }

    # â”€â”€ dependencies â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Install NPM dependencies
      run: npm install

    # â”€â”€ Lint (Prettier + ESLint) â€“ inline via reviewdog â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #     â€¢ NOT strict â†’ step exits 0 even with ESLint errors
    - name: Lint, Prettier & ESLint
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: node scripts/lint.js
      continue-on-error: true

    # â”€â”€ Playwright test run (writes playwright-metrics.json) â”€â”€â”€â”€â”€â”€â”€
    - name: Playwright tests
      run: node scripts/playwright-test.js

    # â”€â”€ Flow-chart PNG & HTML dashboard generation â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Generate flow-chart
      run: node scripts/generate-flowchart.js

    - name: Build checklist
      run: node scripts/checklist.js

    - name: Build static HTML report
      run: node scripts/generate-webpage.js

    # â”€â”€ Create Playwright badge text for PR comment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Create test-summary badge
      if: always()
      run: |
        jq -r '"Total: \(.stats.total) | Passed: \(.stats.passed) | Failed: \(.stats.failed) | Skipped: \(.stats.skipped)"' \
          playwright-metrics.json > artifacts/test-summary.txt

    # â”€â”€ Upload all artefacts (reports + summaries) â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: actions/upload-artifact@v4
      with:
        name: gui-artifacts
        path: artifacts/

####################################################################
# 2) Publish the HTML dashboard via GitHub Pages                   #
####################################################################
  deploy-report:
    needs: review-assistant
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
    - uses: actions/download-artifact@v4
      with: { name: gui-artifacts, path: gui-artifacts }

    - uses: actions/upload-pages-artifact@v3
      with: { path: gui-artifacts/web-report }

    - id: deploy
      uses: actions/deploy-pages@v4

####################################################################
# 3) Sticky PR comment â€“ checklist, lint, tests, dashboard link    #
####################################################################
  comment_link:
    if: github.event_name == 'pull_request'
    needs: deploy-report
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
    - uses: actions/checkout@v4

    - uses: actions/download-artifact@v4
      with: { name: gui-artifacts, path: gui-artifacts }

    # â”€â”€ Extract lint & test numbers for the comment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - id: lint
      run: |
        PRETTIER=$(jq '.prettier.filesWithIssues' gui-artifacts/lint-summary.json)
        ERR=$(jq '.eslint.errors' gui-artifacts/lint-summary.json)
        WARN=$(jq '.eslint.warnings' gui-artifacts/lint-summary.json)
        FIRST=$(jq -r '.eslint.first // empty' gui-artifacts/lint-summary.json)
        echo "prettier=$PRETTIER"  >> "$GITHUB_OUTPUT"
        echo "errors=$ERR"         >> "$GITHUB_OUTPUT"
        echo "warnings=$WARN"      >> "$GITHUB_OUTPUT"
        echo "first=$FIRST"        >> "$GITHUB_OUTPUT"

    - id: tests
      run: |
        BADGE=$(cat gui-artifacts/test-summary.txt)
        echo "badge=$BADGE" >> "$GITHUB_OUTPUT"

    # â”€â”€ Post / update sticky PR comment â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        edit-mode: replace
        comment-id: gui-test-review
        body: |
          ðŸ‘‹ **Hello!**

          ### CI Summary
          * **Playwright:** ${{ steps.tests.outputs.badge }}
          * **Prettier:**  ${{ steps.lint.outputs.prettier }} file(s) need formatting
          * **ESLint:**    ${{ steps.lint.outputs.errors }} error(s), ${{ steps.lint.outputs.warnings }} warning(s)${{ steps.lint.outputs.first && format('\n  *First error*: %s', steps.lint.outputs.first) }}
          * **Checklist, Flow-chart & full reports:** see dashboard

          **[ðŸ“Š View the latest dashboard â†—](https://digitalproductinnovationanddevelopment.github.io/Code-Reviews-of-GUI-Tests/index.html)**

          _Inline reviewdog comments & this summary update on every push._
