name: Split-Module GUI Test Pipeline

on:
  pull_request:
    branches: [main]

###############################################################################
# 1. Playwright tests only (produce artifacts, no Pages deploy)
###############################################################################
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { cache: npm }
      - run: npm install

      - name: Playwright tests
        uses: DigitalProductInnovationAndDevelopment/Code-Reviews-of-GUI-Tests@v1.0.10
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: test-only
          test-files: tests            # ‚Üê run everything under tests
          enable-github-pages: 'false' # no deploy here
          enable-dashboard:  'false'   # dashboard built in job 3

      - name: Build summary JSON
        run: |
          node - <<'EOF'
          const fs = require('fs');
          const rpt = JSON.parse(fs.readFileSync('playwright-metrics.json'));
          const out = {
            total: rpt.stats.total,
            passed: rpt.stats.passed ?? rpt.stats.expected,
            failed: rpt.stats.failed ?? rpt.stats.unexpected,
            skipped: rpt.stats.skipped ?? 0,
            duration: rpt.stats.duration,
            pass_rate: (((rpt.stats.passed ?? rpt.stats.expected) / rpt.stats.total) * 100).toFixed(2)
          };
          fs.mkdirSync('artifacts', { recursive: true });
          fs.writeFileSync('artifacts/playwright-summary-pr.json', JSON.stringify(out, null, 2));
          fs.copyFileSync('playwright-metrics.json', 'artifacts/playwright-metrics.json');
          EOF

      - uses: actions/upload-artifact@v4
        with: { name: playwright-summary, path: artifacts/playwright-summary-pr.json }
      - uses: actions/upload-artifact@v4
        with: { name: playwright-metrics, path: artifacts/playwright-metrics.json }
      - uses: actions/upload-artifact@v4
        with: { name: playwright-report,  path: artifacts/pr-report/ }

###############################################################################
# 2. ESLint / Prettier only
###############################################################################
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { cache: npm }
      - run: npm install
      - name: Lint only
        uses: DigitalProductInnovationAndDevelopment/Code-Reviews-of-GUI-Tests@v1.0.10
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: lint-only

###############################################################################
# 3. Build dashboard from artifacts (deploys to Pages)
###############################################################################
  dashboard:
    needs: [test, lint]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.review.outputs.dashboard-url }}

    steps:
      - uses: actions/checkout@v4

      # install only if there's a package.json (prevents npm-ci errors)
      - name: Install npm if needed
        run: |
          if [ -f package.json ]; then
            npm ci 2>/dev/null || npm install
          else
            echo "üõà No package.json ‚Äì skipping npm install"
          fi

      - uses: actions/download-artifact@v4
        with: { name: playwright-summary, path: dl }
      - uses: actions/download-artifact@v4
        with: { name: playwright-metrics, path: dl }
      - uses: actions/download-artifact@v4
        with: { name: playwright-report,  path: dl/pr-report }

      - name: Dashboard / deploy
        id: review
        uses: DigitalProductInnovationAndDevelopment/Code-Reviews-of-GUI-Tests@v1.0.10
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          mode: dashboard-only
          custom-artifacts-path: dl
          enable-github-pages: 'true'
