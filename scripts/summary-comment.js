#!/usr/bin/env node
/**
 * summary-comment.js
 *
 * Creates or updates a “sticky” PR comment that summarises:
 *   • Playwright metrics
 *   • ESLint + Prettier results
 *   • (optionally) a link to the published HTML dashboard
 *
 * Reads JSON summaries from ./artifacts, which the workflow
 * downloads before invoking this script.
 */

const fs = require('fs');
const path = require('path');
const { Octokit } = require('@octokit/core');

// ── helpers ────────────────────────────────────────────────────────────
function readJson(fp, fallback = {}) {
  try { return JSON.parse(fs.readFileSync(fp, 'utf8')); }
  catch { return fallback; }
}
function icon(ok, warn = false) { return ok ? '✅' : warn ? '⚠️' : '❌'; }

// ── GitHub context ─────────────────────────────────────────────────────
const token = process.env.GITHUB_TOKEN;
if (!token) {
  console.error('GITHUB_TOKEN is missing');
  process.exit(1);
}
const octokit = new Octokit({ auth: token });

const event = JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8'));
if (!event.pull_request) {
  console.error('Not a pull_request event – aborting.');
  process.exit(0);
}
const { owner, name: repo } = event.repository;
const prNumber = event.pull_request.number;

// ── load summaries produced by previous steps ──────────────────────────
const ART = 'artifacts';
const play  = readJson(path.join(ART, 'playwright-summary.json'));
const eslint = readJson(path.join(ART, 'eslint-summary.json'));
const prett  = readJson(path.join(ART, 'prettier-summary.json'));

// optional: injected by workflow
const webUrl = process.env.WEB_REPORT_URL;

// ── compose comment body ───────────────────────────────────────────────
const body = `
# 🔍 GUI Test Review Report

## ✅ Test Execution Summary
| Metric | Value | Status |
| ------ | ----- | ------ |
| **Total Tests** | ${play.total   ?? 0} | |
| **Passed**      | ${play.passed  ?? 0} | ${icon((play.passed  ?? 0) === (play.total ?? 0), (play.failed ?? 0) === 0)} |
| **Failed**      | ${play.failed  ?? 0} | ${icon((play.failed  ?? 0) === 0)} |
| **Skipped**     | ${play.skipped ?? 0} | ${icon((play.skipped ?? 0) === 0, true)} |
| **Pass Rate**   | ${play.pass_rate ?? 0}% | ${icon((play.pass_rate ?? 0) >= 95, (play.pass_rate ?? 0) >= 80)} |
| **Duration**    | ${play.duration ?? 0} ms | |

---

## 🎨 Code Style (Prettier)
| Check | Result |
|-------|--------|
| **Style Issues** | ${prett.has_issues ? '❌ Found' : '✅ None'} |
| **Files Affected** | ${prett.files_with_issues ?? 0} |
| **Total Changes**  | ${prett.total_changes    ?? 0} |

---

## 📋 Code Quality (ESLint)
| Metric | Count | Status |
| ------ | ----- | ------- |
| **Files**    | ${eslint.total_files ?? 0} | |
| **Errors**   | ${eslint.errors      ?? 0} | ${icon((eslint.errors   ?? 0) === 0)} |
| **Warnings** | ${eslint.warnings    ?? 0} | ${icon((eslint.warnings ?? 0) === 0, true)} |
| **Fixable**  | 🔴 ${eslint.fixable_errors ?? 0} / 🟡 ${eslint.fixable_warnings ?? 0} | |

**Top Rules:**  
${eslint.error_rules   ?? 'None'}  
${eslint.warning_rules ?? 'None'}

**Files Needing Attention:**  
${eslint.problematic_files ?? 'None'}

---

## 📊 Test Flow Diagram
${
  webUrl
    ? `👉 **[Open the full HTML report&nbsp;↗](${webUrl})**`
    : 'Visual diagram is attached as workflow artifact **gui-artifacts/flowchart.png**.'
}

---

_Automated comment generated by the GUI Test Review workflow._
`;

// ── create / update sticky comment ─────────────────────────────────────
(async () => {
  const { data: comments } = await octokit.request(
    'GET /repos/{owner}/{repo}/issues/{issue_number}/comments',
    { owner, repo, issue_number: prNumber }
  );

  const existing = comments.find(
    (c) => c.user.type === 'Bot' && c.body.startsWith('# 🔍 GUI Test Review Report')
  );

  if (existing) {
    await octokit.request(
      'PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}',
      { owner, repo, comment_id: existing.id, body }
    );
    console.log('🔄 Updated GUI-test summary comment.');
  } else {
    await octokit.request(
      'POST /repos/{owner}/{repo}/issues/{issue_number}/comments',
      { owner, repo, issue_number: prNumber, body }
    );
    console.log('💬 Created GUI-test summary comment.');
  }
})().catch((err) => {
  console.error(err);
  process.exit(1);
});
