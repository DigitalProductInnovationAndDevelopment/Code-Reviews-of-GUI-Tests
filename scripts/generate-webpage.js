#!/usr/bin/env node
/**
 * scripts/generate-webpage.js
 *
 * Builds artifacts/web-report/index.html (plus flowchart.png copy).
 * Pure synchronous FS calls → no need for top-level await or async IIFE.
 */

const fs   = require('fs');
const path = require('path');

const ART = 'artifacts';
const OUT = path.join(ART, 'web-report');
fs.mkdirSync(OUT, { recursive: true });

function readJSON(fp, fallback = {}) {
  try { return JSON.parse(fs.readFileSync(fp, 'utf8')); }
  catch { return fallback; }
}

const play  = readJSON(path.join(ART, 'playwright-summary.json'));
const eslint = readJSON(path.join(ART, 'eslint-summary.json'));
const prett  = readJSON(path.join(ART, 'prettier-summary.json'));

const imgSrc = path.join(ART, 'flowchart.png');
const imgDest = path.join(OUT, 'flowchart.png');
if (fs.existsSync(imgSrc)) fs.copyFileSync(imgSrc, imgDest);

const icon = (ok, warn = false) => ok ? '✅' : warn ? '⚠️' : '❌';

const html = /* html */`
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>GUI Test Review Report</title>
<style>
 body{font:16px/1.5 system-ui,Roboto,Helvetica,Arial,sans-serif;margin:2rem;max-width:1080px}
 h1,h2{color:#1976D2;margin-top:2.5rem}
 table{border-collapse:collapse;width:100%;margin:1rem 0}
 th,td{border:1px solid #ddd;padding:.6rem;text-align:left}
 th{background:#E3F2FD}
 tr:nth-child(even){background:#fafafa}
 .center{text-align:center}
 img{max-width:100%;height:auto;border:1px solid #ccc;border-radius:8px}
</style>
</head>
<body>
<h1>🔍 GUI Test Review Report</h1>

<h2>✅ Test Execution Summary</h2>
<table>
<tr><th>Metric</th><th>Value</th><th>Status</th></tr>
<tr><td><strong>Total Tests</strong></td><td>${play.total ?? 0}</td><td></td></tr>
<tr><td><strong>Passed</strong></td><td>${play.passed ?? 0}</td><td>${icon((play.passed ?? 0)===(play.total ?? 0),(play.failed ?? 0)===0)}</td></tr>
<tr><td><strong>Failed</strong></td><td>${play.failed ?? 0}</td><td>${icon((play.failed ?? 0)===0)}</td></tr>
<tr><td><strong>Skipped</strong></td><td>${play.skipped ?? 0}</td><td>${icon((play.skipped ?? 0)===0,true)}</td></tr>
<tr><td><strong>Pass Rate</strong></td><td>${play.pass_rate ?? 0}%</td><td>${icon((play.pass_rate ?? 0)>=95,(play.pass_rate ?? 0)>=80)}</td></tr>
<tr><td><strong>Duration</strong></td><td>${play.duration ?? 0} ms</td><td></td></tr>
</table>

<h2>🎨 Code Style (Prettier)</h2>
<table>
<tr><th>Check</th><th>Result</th></tr>
<tr><td><strong>Style Issues</strong></td><td>${prett.has_issues ? '❌ Found' : '✅ None'}</td></tr>
<tr><td><strong>Files Affected</strong></td><td>${prett.files_with_issues ?? 0}</td></tr>
<tr><td><strong>Total Changes</strong></td><td>${prett.total_changes ?? 0}</td></tr>
</table>

<h2>📋 Code Quality (ESLint)</h2>
<table>
<tr><th>Metric</th><th>Count</th><th>Status</th></tr>
<tr><td><strong>Files</strong></td><td>${eslint.total_files ?? 0}</td><td></td></tr>
<tr><td><strong>Errors</strong></td><td>${eslint.errors ?? 0}</td><td>${icon((eslint.errors ?? 0)===0)}</td></tr>
<tr><td><strong>Warnings</strong></td><td>${eslint.warnings ?? 0}</td><td>${icon((eslint.warnings ?? 0)===0,true)}</td></tr>
<tr><td><strong>Fixable (Errors / Warnings)</strong></td><td>🔴 ${eslint.fixable_errors ?? 0} / 🟡 ${eslint.fixable_warnings ?? 0}</td><td></td></tr>
</table>

<p><strong>Top Rules:</strong><br>
${eslint.error_rules ?? 'None'}<br>
${eslint.warning_rules ?? 'None'}</p>

<p><strong>Files Needing Attention:</strong><br>
${eslint.problematic_files ?? 'None'}</p>

<h2>📊 Test Flow Diagram</h2>
<div class="center">
${fs.existsSync(imgDest) ? '<img src="flowchart.png" alt="Flowchart">' : '<em>No diagram generated</em>'}
</div>

<p style="margin-top:3rem;font-size:.9rem;color:#555">
  _Static report generated by the GUI Test Review workflow._
</p>
</body>
</html>
`;

fs.writeFileSync(path.join(OUT, 'index.html'), html, 'utf8');
console.log(`📝 Web report written → ${path.relative('.', OUT)}/index.html`);
